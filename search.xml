<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用nginx正确配置带www和不带www的https服务</title>
      <link href="/posts/22516.html"/>
      <url>/posts/22516.html</url>
      
        <content type="html"><![CDATA[<p><strong>nginx配置如下</strong></p><p>该配置能够让如下四种访问最终都指向<a href="https://www.feichaoyu.com" target="_blank" rel="noopener">https://www.feichaoyu.com</a></p><ol><li><a href="http://feichaoyu.com/" target="_blank" rel="noopener">http://feichaoyu.com/</a></li><li><a href="http://feichaoyu.com/" target="_blank" rel="noopener">http://www.feichaoyu.com/</a></li><li><a href="http://feichaoyu.com/" target="_blank" rel="noopener">https://feichaoyu.com/</a></li><li><a href="http://feichaoyu.com/" target="_blank" rel="noopener">https://www.feichaoyu.com/</a></li></ol><p>它们最终都指向<a href="https://www.feichaoyu.com" target="_blank" rel="noopener">https://www.feichaoyu.com</a></p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">listen</span>       <span class="token number">443</span><span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate</span>      <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com_bundle<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  feichaoyu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">301</span>   <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">301</span>   <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span>       <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate</span>      <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com_bundle<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>www<span class="token punctuation">.</span>feichaoyu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">ssl_session_cache</span>    shared<span class="token punctuation">:</span><span class="token keyword">SSL</span><span class="token punctuation">:</span>1m<span class="token punctuation">;</span>    <span class="token keyword">ssl_session_timeout</span>  5m<span class="token punctuation">;</span>    <span class="token keyword">ssl_ciphers</span>  HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>    <span class="token keyword">ssl_prefer_server_ciphers</span>  on<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">root</span>   html<span class="token punctuation">;</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发基础知识</title>
      <link href="/posts/25228.html"/>
      <url>/posts/25228.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p><strong>进程</strong>：是线程的容器，是系统进行资源分配和调度的基本单位。</p><p><strong>线程</strong>：是系统分配处理器时间资源的基本单元，是进程内独立执行的一个单元执行流，是程序执行的最小单位。</p><p>总结：</p><ul><li>进程要分配一大部分的内存，而线程只需要分配一部分栈就可以了。</li><li>一个程序至少有一个进程，一个进程至少有一个线程。</li><li>进程是资源分配的最小单位，线程是程序执行的最小单位。</li><li>一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</li></ul><p><img src="https://i.loli.net/2020/02/16/x6pKVCMiYw7SygF.png" alt="Snipaste_2020-02-16_21-19-05.png"></p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><strong>并行</strong>：在<strong>单位时间内</strong>多个任务同时在执行 。</p><p><strong>并发</strong>：<strong>同一个时间段内</strong>多个任务同时都在执行，并且都没有执行结束。并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说<strong>并发的多个任务在单位时间内不一定同时在执行 。</strong></p><h3 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h3><p>阻塞与非阻塞的重点在于<strong>线程等待消息时的行为</strong>，也就是在等待消息的时候，当前线程是挂起状态，还是非挂起状态。</p><p><strong>阻塞</strong>：调用发出去后，在消息返回之前，当前线程会被挂起，直到有消息返回，当前线程才会被激活。</p><p><strong>非阻塞</strong>：调用在发出后，不会阻塞当前线程，会立即返回。</p><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>同步与异步的重点在<strong>消息通知的方式</strong>上，也就是调用结果通知的方式。</p><p><strong>同步</strong>：当一个同步调用发出去后，调用者要一直等待调用结果的通知后，才能进行后续的执行。</p><p><strong>异步</strong>：当一个异步调用发出去后，调用者如果不能立即得到调用结果的返回，可以继续进行后续的执行。</p><p>异步调用要想获得结果，一般有两种方式：</p><ul><li>主动轮询异步调用的结果。</li><li>被调用方通过回调（callback）来通知调用方调用结果。</li></ul><h3 id="死锁、饥饿、活锁"><a href="#死锁、饥饿、活锁" class="headerlink" title="死锁、饥饿、活锁"></a>死锁、饥饿、活锁</h3><p><strong>死锁</strong>：每个线程都在等待对方线程释放锁，然而谁都不主动释放锁，结果就构成死锁。</p><p><strong>饥饿</strong>：指某一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行。比如它的线程优先级可能太低，而高优先级的线程不断抢占它需要的资源，导致低优先级线程无法工作。与死锁相比，饥饿还是有可能在未来一段时间内解决的（比如，高优先级的线程已经完成任务，不再疯狂执行）。</p><p><strong>活锁</strong>：举个例子，当你要坐电梯下楼时，电梯到了，门开了，这时你正准备出去。但很不巧的是，门外一个人挡着你的去路，他想进来。于是，你很礼貌地靠左走，避让对方。同时，对方也非常礼貌地靠右走，希望避让你。结果，你们俩就又撞上了。于是乎，你们都意识到了问题，希望尽快避让对方，你立即向右边走，同时，他立即向左边走。结果，又撞上了！不过介于人类的智能，我相信这个动作重复两三次后，你应该可以顺利解决这个问题。因为这个时候，大家都会本能地对视，进行交流，保证这种情况不再发生。但如果这种情况发生在两个线程之间可能就不会那么幸运了。如果线程的智力不够，且都秉承着“谦让”的原则，主动将资源释放给他人使用，那么就会导致资源不断地在两个线程间跳动，而没有一个线程可以同时拿到所有资源正常执行，这种情况就是活锁。</p><h3 id="Amdahl-定律和-Gustafson-定律"><a href="#Amdahl-定律和-Gustafson-定律" class="headerlink" title="Amdahl 定律和 Gustafson 定律"></a>Amdahl 定律和 Gustafson 定律</h3><p><strong>Amdahl 定律</strong>告诉我们：</p><p>使用多核 CPU 对系统进行优化，优化的效果取决于 CPU 的数量，以及系统中串行化程序的比例。CPU 数量越多，串行化比例越低，优化效果越好。只提高 CPU 的数量而不降低程序的串行化比例，无法提高系统性能。</p><p><strong>Gustafson 定律</strong>告诉我们：</p><p>如果可被并行化的代码所占比例足够大，那么加速比就能随着 CPU 的数量线性增长。</p><h2 id="Java-中共享变量的内存可见性"><a href="#Java-中共享变量的内存可见性" class="headerlink" title="Java 中共享变量的内存可见性"></a>Java 中共享变量的内存可见性</h2><p>首先来看看在多线程下处理共享变量时 Java 的内存模型，</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-16_14-33-44.jpg" alt=""></p><p>Java 内存模型规定，将所有的<strong>变量都存放在主内存</strong>中，当线程使用变量时，会把<strong>主内存里面的变量复制到自己的工作空间</strong>或者叫作工作内存，线程读写变量时操作的是自己工作内存中的变量 。 Java 内存模型是一个抽象的概念，那么在实际实现中线程的工作内存是什么呢？ 如下图，</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-16_14-47-25.jpg" alt=""></p><p>上图所示是一个双核 CPU 系统架构，每个核有自己的控制器和运算器，其中控制器包含一组寄存器和操作控制器，运算器执行算术逻辑运算 。每个核都有自己的一级缓存，在有些架构里面还有一个所有 CPU 都共享的二级缓存。 那么 Java 内存模型里面的工作内存，就对应这里的 L1 或者 L2 缓存或者 CPU 的寄存器 。 </p><p>当一个线程操作共享变量时， 它首先从主内存复制共享变量到自己的工作内存 ， 然后对工作内存里的变量进行处理， 处理完后将变量值更新到主内存。那么假如线程 A 和线程 B 同时处理一个共享变量 ， 会出现什么情况？由上图所示 CPU 架构， 假设线程 A 和线程 B 使用 不同 CPU 执行，并且当前两级 Cache 都为空 ，那么这时候由于 Cache 的存在，将会导致内存不可见问题 ， 具体分析如下：</p><ul><li>线程 A 首先获取共享变量 X 的值，由于两级 Cache 都没有命中 ，所以加载主内存中 X 的值，假如为 0。然后把 X=0 的值缓存到两级缓存 ， 线程 A 修改 X 的值为 1，然后将其写入两级 Cache ， 并且刷新到主内存 。 线程 A 操作完毕后，线程 A 所在的CPU 的两级 Cache 内和主内存里面的 X 的值都是 1 。</li><li>线程 B 获取 X 的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命中了 ，所以返回 X=1 ； 到这里一切都是正常的 ， 因为这时候主内存中也是 X=1 。然后线程 B 修改 X 的值为 2 ， 并将其存放到线程 B 所在的一级 Cache 和共享二级 Cache 中，最后更新主内存中 X 的值为 2 ；到这里一切都是正常的 。</li><li>线程 A 这次又需要修改 X 的值 ， 获取时一级缓存命中 ， 并且 X=1 ，到 这里问题就出现了，明明线程 B 已经把 X 的值修改为了 2，为何线程 A 获取的还是 1 呢？ 这就是共享变量的内存不可见问题 ， 也就是线程 B 写入的值对线程 A 不可见。那么如何解决共享变量内存不可见问题？ 使用 Java 中的<code>volatile</code>关键字就可以解决这个问题 ，下面会有讲解。 </li></ul><h2 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h2><p><code>synchronized</code>块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用 ，这些 Java 内置的使用者看不到的锁被称为<strong>内部锁</strong>，也叫作<strong>监视器锁</strong>。线程的执行代码在进入<code>synchronized</code>代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在<strong>正常退出同步代码块</strong>或者<strong>抛出异常后</strong>或者在同步块内<strong>调用了该内置锁资源的<code>wait</code>系列方法</strong>时释放该内置锁。内置锁是<strong>排它锁</strong>，也就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。</p><p>另外，由于 Java 中的线程是与操作系统的原生线程一一对应的，所以当阻塞一个线程时，需要<strong>从用户态切换到内核态执行阻塞操作</strong>，这是很耗时的操作，而<code>synchronized</code>的使用就会导致<strong>上下文切换</strong>。</p><h3 id="synchronized-的内存语义"><a href="#synchronized-的内存语义" class="headerlink" title="synchronized 的内存语义"></a>synchronized 的内存语义</h3><p>前面介绍了共享变量内存可见性问题主要是由于线程的工作内存导致的，下面我们来讲<code>synchronized</code>的一个内存语义，这个内存语义就可以解决共享变量内存可见性问题 。</p><p><strong>进入<code>synchronized</code>块的内存语义</strong>是把在 <code>synchronized</code> 块内使用到的变量从线程的工作内存中清除，这样在 <code>synchronized</code> 块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取 。 </p><p><strong>退出 <code>synchronized</code> 块的内存语义</strong>是把在 <code>synchronized</code> 块内对共享变量的修改刷新到主内存 。</p><p>其实这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从主内存进行加载，在释放锁时将本地内存中修改的共享变量刷新到主内存。除可以解决共享变量内存可见性问题外， <code>synchronized</code> 经常被用来实现原子性操作。</p><p>对<code>synchronized</code>内存语义的总结：</p><ul><li>线程 A 释放一个锁，实质上是线程 A 向接下来将要获取这个锁的某个线程发出了（其对共享变量所做修改的）消息。</li><li>线程 B 获取一个锁， 实质上是线程 B 接收了之前某个线程发出的（在写这个<code>volatile</code>变量之前对共享变量所做修改的）消息。</li><li>线程 A 释放锁， 随后线程 B 获取锁， 这个过程实质上是线程 A 通过主内存向线程 B 发送消息。</li></ul><p>示意图如下：</p><p><img src="https://i.loli.net/2020/01/10/ZyUDlG1vt29wh4i.png" alt="Snipaste_2019-07-02_16-36-19.png"></p><p>使用<code>synchronized</code>关键字的注意点：</p><ul><li>锁对象不能为空</li><li>作用域不宜过大</li><li>避免死锁</li></ul><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>上面介绍了使用锁的方式可以解决共享变量内存可见性问题，但是使用锁太笨重，因为它会带来线程上下文的切换开销。对于解决内存可见性问题，Java 还提供了一种弱形式的同步，也就是使用 <code>volatile</code> 关键字。 该关键字可以确保<strong>对一个变量的更新让其他线程马上可见</strong>。当一个变量被声明为 <code>volatile</code> 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。当其他线程读取该共享变量时，会从主内存重新获取最新值，而不是使用当前线程的工作内存中的值。</p><p><strong><code>volatile</code>只能修饰类变量和实例变量。</strong></p><p><code>volatile</code> 的内存语义和 <code>synchronized</code> 有相似之处，具体来说就是，当线程写入了 <code>volatile</code> 变量值时就等价于线程退出 <code>synchronized</code> 同步块（把写入工作内存的变量值同步到主内存），读取 <code>volatile</code> 变量值时就相当于进入同步块（先清空本地内存变量值，再从主内存获取最新值）。</p><p>使用 <code>synchronized</code> 和使用 <code>volatile</code> 是等价的，都解决了共享变量的内存可见性问题，但是<strong>前者是独占锁</strong>，同时只能有一个线程调用方法，其他调用线程会<strong>被阻塞</strong>，同时会存在<strong>线程上下文切换</strong>和<strong>线程重新调度</strong>的开销，这也是使用锁方式不好的地方。而<strong>后者是非阻塞方式</strong>，不会造成线程上下文切换的开销。但并非在所有情况下使用它们都是等价的，<strong><code>volatile</code> 虽然提供了可见性保证，但并不保证操作的原子性</strong>。</p><p>对<code>volatile</code>内存语义的总结：</p><ul><li>线程 A 写一个<code>volatile</code>变量，实质上是线程 A 向接下来将要读这个<code>volatile</code>变量的某个线程发出了（其对共享变量所做修改的）消息。</li><li>线程 B 读一个<code>volatile</code>变量， 实质上是线程 B 接收了之前某个线程发出的（在写这个<code>volatile</code>变量之前对共享变量所做修改的）消息。</li><li>线程 A 写一个<code>volatile</code>变量， 随后线程 B 读这个<code>volatile</code>变量， 这个过程实质上是线程 A 通过主内存向线程 B 发送消息。</li></ul><p>示意图和上面的<code>synchronized</code> 内存语义示意图相同。</p><p>以下场景下用<code>volatile</code>关键字：</p><ul><li>写入变量值不依赖变量的当前值，因为如果依赖当前值，将是<strong>获取—计算—写入</strong>三步操作（比如 i++），这三步操作不是原子性的，而 <code>volatile</code> 不保证原子性 </li><li>开关控制，true or false</li></ul><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p><strong>重排序</strong>是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</p><p>如果两个操作访问同一个变量，且这两个操作中有一个是写操作，那么这两个操作之间就存在<strong>数据依赖性</strong>。如下所示，数据依赖分为 3 种类型。</p><table><thead><tr><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>写后读</td><td>a=1; b=a;</td><td>写一个变量之后，再读这个变量</td></tr><tr><td>写后写</td><td>a=1; a=2;</td><td>写一个变量之后，再写这个变量</td></tr><tr><td>读后写</td><td>a=b; b=1;</td><td>读一个变量之后，再写这个变量</td></tr></tbody></table><p>上面 3 种情况，只要交换两个操作的执行顺序，程序的执行结果就会被改变。比如第一个写后读操作顺序调换为 b=a; a=1，则结果由 a=b=1 变为 a=1; b=0，所以，写后读操作存在数据依赖性。</p><p>编译器和处理器不会改变存在数据依赖性的两个操作的执行顺序。</p><p>但是如果操作之间不存在数据依赖关系，那么这些操作就可能被编译器和处理器重排序，看如下示例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// A</span><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// B</span><span class="token keyword">double</span> area <span class="token operator">=</span> pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>操作 A 和 C 之间有数据依赖性（写后读），B 和 C 之间也存在数据依赖性（写后读），所以 C 不能在 A 和 B 之前执行。但是，A 和 B 之间没有数据依赖性 ，所以 A 和 B 之间可能会被重排序。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// B</span><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// A</span><span class="token keyword">double</span> area <span class="token operator">=</span> pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然重排序在单线程中是没有影响的，但在多线程中就会出现线程安全问题。</p><p><strong>禁止重排序的方法</strong></p><p>第一种方法就是加<code>volatile</code>关键字，这里着重讲第二种方法，其实这种方法也不能说是禁止重排序，而是<strong>让重排序对其他线程不可见</strong>。</p><ul><li>基于类初始化的方法</li></ul><p>JVM 在类的初始化阶段（即在 Class 被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM 会去获取一个锁，这个锁可以同步多个线程对同一个类的初始化。基于这个特性，可以实现另一种线程安全的延迟初始化方案（这个方案被称之为 Initialization On Demand Holder idiom）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Instance instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Instance <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> InstanceHolder<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里将导致InstanceHolder类被初始化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设两个线程并发执行<code>getInstance()</code>方法，示意图如下，</p><p><img src="https://i.loli.net/2020/01/10/CnERTfmvNs8xQGJ.png" alt="Snipaste_2019-07-03_09-51-12.png"></p><p>这个方案的实质是：允许 2 和 3 重排序，但是不允许非构造线程看到这个重排序。</p><p>初始化一个类，包括执行这个类的静态初始化和初始化在这个类中声明的静态字段。根据 Java 语言规范，在首次发生下列任意一种情况时，一个类或接口类型 T 将被立即初始化。</p><ul><li>T 是一个类，而且一个 T 类型的实例被创建</li><li>T 是一个类，且 T 中声明的一个静态方法被调用</li><li>T 中声明的一个静态字段被赋值</li><li>T 中声明的一个静态字段被使用</li></ul><p>在<code>InstanceFactory</code>示例代码中，首次执行<code>getInstance()</code>方法的线程将导致<code>InstanceHolder</code>类被初始化（符合最后一种情况<code>InstanceHolder.instance</code>）。</p><p>由于 Java 语言是多线程的，多个线程可能在同一时间尝试去初始化同一个类或接口（比如这里多个线程可能在同一时刻调用<code>getInstance()</code>方法来初始化<code>InstanceHolder</code>类）。因此，在 Java 中初始化一个类或者接口时，需要做细致的同步处理。</p><p>Java 语言规范规定，对于每一个类或接口 C，都有一个唯一的初始化锁 LC 与之对应。从 C 到 LC 的映射，由JVM 的具体实现去自由实现。JVM 在类初始化期间会获取这个初始化锁，并且每个线程至少获取一次锁来确保这个类已经被初始化过了。</p><p>对于类或接口的初始化，Java 语言规范制定了精巧而复杂的类初始化处理过程。Java 初始化一个类或接口的处理过程如下（这里对类初始化处理过程的说明，人为的把类初始化的处理过程分为了 5 个阶段）。</p><blockquote><p><strong>第 1 阶段</strong>：通过在 Class 对象上同步（即获取 Class 对象的初始化锁），来控制类或接口的初始化。这个获取锁的线程会一直等待， 直到当前线程能够获取到这个初始化锁。</p></blockquote><p>假设 Class 对象当前还没有被初始化（初始化状态 state，此时被标记为 state=noInitialization），且有两个线程 A 和 B 试图同时初始化这个 Class 对象，如下所示。</p><p><img src="https://i.loli.net/2020/01/10/TXcfmOGJRKS5Qd3.png" alt="Snipaste_2019-07-03_10-08-56.png"></p><p>时序表如下：</p><table><thead><tr><th>时间</th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>t1</td><td>A1：尝试获取 Class 对象的初始化锁。这里假设线程 A 获取到了初始化锁</td><td>B1：尝试获取 Class 对象的初始化锁，由于线程 A 获取到了锁，线程 B 将一直等待获取初始化锁</td></tr><tr><td>t2</td><td>A2：线程 A 看到线程还未被初始化，线程设置 state=initializing</td><td></td></tr><tr><td>t3</td><td>A3：线程 A 释放初始化锁</td><td></td></tr></tbody></table><blockquote><p><strong>第 2 阶段</strong>：线程 A 执行类的初始化，同时线程 B 在初始化锁对应的 condition 上等待。</p></blockquote><p><img src="https://i.loli.net/2020/01/10/g8ebIKQFZrvy3in.png" alt="Snipaste_2019-07-03_10-16-20.png"></p><p>时序表如下：</p><table><thead><tr><th>时间</th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>t1</td><td>A1：执行类的静态初始化和初始化类中声明的静态字段</td><td>B1：获取到初始化锁</td></tr><tr><td>t2</td><td></td><td>B2：读取到 state = initializing</td></tr><tr><td>t3</td><td></td><td>B3：释放初始化锁</td></tr><tr><td>t4</td><td></td><td>B4：在初始化锁的 condition 中等待</td></tr></tbody></table><blockquote><p><strong>第 3 阶段</strong>：线程 A 设置 state=initialized，然后唤醒 condition 中等待的所有线程。</p></blockquote><p><img src="https://i.loli.net/2020/01/10/qHS5hJMwyxkKGvu.png" alt="Snipaste_2019-07-03_10-25-19.png"></p><p>时序表如下：</p><table><thead><tr><th>时间</th><th>线程A</th></tr></thead><tbody><tr><td>t1</td><td>A1：获取到初始化锁</td></tr><tr><td>t2</td><td>A2：读取到 state = initialized</td></tr><tr><td>t3</td><td>A3：释放初始化锁</td></tr><tr><td>t4</td><td>A4：释放初始化锁</td></tr><tr><td>t5</td><td>A5：线程 A 的类初始化处理过程完成</td></tr></tbody></table><blockquote><p><strong>第 4 阶段</strong>：线程 B 结束类的初始化处理。</p></blockquote><p><img src="https://i.loli.net/2020/01/10/wKbJv6sje9TL1fg.png" alt="Snipaste_2019-07-03_10-29-45.png"></p><p>时序表如下：</p><table><thead><tr><th>时间</th><th>线程B</th></tr></thead><tbody><tr><td>t1</td><td>B1：获取到初始化锁</td></tr><tr><td>t2</td><td>B2：读取到 state = initialized</td></tr><tr><td>t3</td><td>B3：释放初始化锁</td></tr><tr><td>t4</td><td>B4：线程 B 的类初始化处理过程完成</td></tr></tbody></table><blockquote><p><strong>第 5 阶段</strong>：线程 C 执行类的初始化处理。</p></blockquote><p><img src="https://i.loli.net/2020/01/10/lkm8iwCoQqfNWpY.png" alt="Snipaste_2019-07-03_10-36-23.png"></p><p>时序表如下：</p><table><thead><tr><th>时间</th><th>线程C</th></tr></thead><tbody><tr><td>t1</td><td>C1：获取到初始化锁</td></tr><tr><td>t2</td><td>C2：读取到 state = initialized</td></tr><tr><td>t3</td><td>C3：释放初始化锁</td></tr><tr><td>t4</td><td>C4：线程 C 的类初始化处理过程完成</td></tr></tbody></table><p>在第 3 阶段之后，类已经完成了初始化。因此线程 C 在第 5 阶段的类初始化处理过程相对简单一些(前面的线程 A 和 B 的类初始化处理过程都经历了两次锁获取和锁释放，而线程 C 的类初始化处理只需要经历一次锁获取和锁释放)。</p><p>线程 A 在第 2 阶段的 A1 执行类的初始化，并在第 3 阶段的 A4 释放锁；线程 C 在第 5 阶段的 C1 获取同一个锁，并在第 5 阶段的 C4 之后才开始访问这个类。根据 Java 内存模型规范的锁规则，将存在如下的 happen-before关系：</p><blockquote><p>线程 A 执行类的初始化时的写入操作，线程 C 一定能看到。</p></blockquote><p>通过对比<strong>基于<code>volatile</code>的双重检查锁</strong>的方案和<strong>基于类初始化</strong>的方案，我们会发现基于类初始化的方案的实现代码更简洁。但基于<code>volatile</code>的双重检查锁的方案有一个额外的优势：除了可以对静态字段实现延迟初始化外，还可以对实例字段实现延迟初始化。</p><p>字段延迟初始化降低了初始化类或创建实例的开销，但增加了访问被延迟初始化的字段的开销。在大多数时候，正常的初始化要优于延迟初始化。<strong>如果确实需要对实例字段使用线程安全的延迟初始化，请使用上面介绍的基于<code>volatile</code>的延迟初始化的方案；如果确实需要对静态字段使用线程安全的延迟初始化，请使用上面介绍的基于类初始化的方案。</strong></p><h3 id="happen-before-八大原则"><a href="#happen-before-八大原则" class="headerlink" title="happen-before 八大原则"></a>happen-before 八大原则</h3><p>在 JMM 中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在 happen-before原则。</p><p>happen-before 在这里<strong>不能理解成在什么之前发生</strong>，它和时间没有任何关系。解释成“<strong>生效可见于</strong>”更准确。</p><blockquote><p><strong>定义 A happen-before B 表示 A 操作将对 B 操作可见。</strong></p><p><strong>注意：happen-before 关系并不代表了最终的执行顺序。如果 B 操作中用到了 A 操作的变量，那么就禁止重排序，没有用到的话就可以重排序。</strong></p></blockquote><ul><li><strong>单线程 happen-before 原则</strong>：在同一个线程中，书写在前面的操作 happen-before 后面的操作。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// A</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据<strong>单线程 happen-before 原则</strong>，A happens-before B，所以 A 操作产生的结果 a 一定要对 B 操作可见，B 操作中确实也用到了变量 a，所以这两个操作禁止重排序。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据<strong>单线程 happen-before 原则</strong>，A happens-before B，所以 A 操作产生的结果 a 一定要对 B 操作可见，但是现在 B 操作并没有用到 a，所以这两个操作可以重排序。</p><ul><li><strong>锁的 happen-before 原则</strong>：同一个锁的 unlock 操作 happen-before 此锁的 lock 操作。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> var<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> A <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> var<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意这里和method1 method2 用的可不是同一个锁哦</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            var <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread1 thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread2 thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread3 thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 以Thread1为例代码如下</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> A a<span class="token punctuation">;</span>    <span class="token function">Thread1</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果某个时刻执行完 Thread1 马上执行 Thread2，因为 Thread1 执行 A 类的 method1 方法后肯定要释放锁，Thread2 在执行 A 类的 method2 方法前要先拿到锁，符合<strong>锁的happen-before原则</strong>，那么在 Thread2 的 method2 方法中的变量 var 一定是 3，所以变量 b 的值也一定是3。但是如果是<code>thread1.start(); thread3.start(); thread2.start();</code>这个顺序，那么最后 Thread2 的 method2 方法中的 b 值是 3，还是 4 呢？其结果是可能是 3，也可能是 4。的确 Thread3 在执行完 method3 方法后的确要 unlock，然后 Thread2 再 lock，但是这两个线程用的不是同一个锁，所以 JMM 的这两个操作之间不符合八大 happen-before 原则中的任何一条，所以 JMM 不能保证 Thread3 对 var 变量的修改对 Thread2 一定可见，虽然 Thread3 先于 Thread2 发生。</p><ul><li><strong>volatile 的 happen-before 原则</strong>：对一个 volatile 变量的写操作 happen-before 对此变量的任意操作。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// A </span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果线程 1 执行 A，线程 2 执行了 B，并且线程 1 执行后，线程 2 再执行，那么符合 <strong>volatile 的 happen-before 原则</strong>，所以线程 2 中的 a 值一定是 1。</p><ul><li><strong>happen-before 的传递性原则</strong>：如果 A 操作 happen-before B 操作，B 操作 happen-before C 操作，那么 A操作 happen-before C 操作。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> var<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// A</span>var <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// B</span>c <span class="token operator">=</span> var<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 A <em>hb</em> B，B <em>hb</em> C，C <em>hb</em> D，所以 A <em>hb</em> D。既然 A <em>hb</em> D，那么不管是 ABCD 或者是 ACBD 执行顺序，结果都是确定的，A 的运算结果可见于 D，即 c=4。</p><ul><li><strong>线程启动的 happen-before 原则</strong>：同一个线程的<code>start</code>方法 happen-before 此线程的其它方法。</li></ul><ul><li><strong>线程中断的 happen-before 原则</strong>：对线程<code>interrupt</code>方法的调用 happen-before 被中断线程的检测到中断发送的代码。</li></ul><ul><li><strong>线程终结的 happen-before 原则</strong>：线程中的所有操作都 happen-before 线程的终止检测。</li></ul><ul><li><strong>对象创建的 happen-before 原则</strong>：一个对象的初始化和结束 happen-before 它的<code>finalize</code>方法调用。</li></ul><h3 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性</h3><p>顺序一致性内存模型是一个理论参考模型，处理器的内存模型和编程语言的内存模型都会依顺序一致性内存模型作为参考。</p><p>顺序一致性内存模型有两大特性：</p><ul><li>一个线程中的所有操作必须按照程序的顺序执行。</li><li>所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。</li></ul><p><img src="https://i.loli.net/2020/01/10/utr6klgqYp7fvU2.png" alt="Snipaste_2019-07-01_21-46-50.png"></p><p>有上图可见，顺序一致性模型有一个单一的全局内存，这个内存通过一个左右摆动的开关可以连接到任意一个线程，同时每个线程必须按照程序的顺序来执行内存读写操作。在任意时间点最多<strong>只能有一个线程可以连接到内存</strong>。当多个线程并发执行时，图中的开关装置能把所有线程的所有内存读写操作串行化。</p><p>假设有两个线程 A 和 B 并发执行。其中 A 线程有 3 个操作，它们在程序中的顺序是：A1→A2→A3。B 线程也有 3 个操作，它们在程序中的顺序是：B1→B2→B3。假设这两个线程使用监视器锁<code>synchronized</code>来正确同步：A 线程的 3 个操作执行后释放监视器锁，随后 B 线程获取同一个监视器锁。那么程序在顺序一致性模型中的示意图如下所示：</p><p><img src="https://i.loli.net/2020/01/10/8CvgF34DSiW67ef.png" alt="Snipaste_2019-07-01_21-01-50.png"></p><p>现在假设这两个线程没有做同步，下面这个未同步程序在顺序一致性模型中的示意图如下：</p><p><img src="https://i.loli.net/2020/01/10/Ai4TRDfpPVOleC3.png" alt="Snipaste_2019-07-01_21-03-15.png"></p><p>未同步程序在顺序一致性模型中虽然整体执行顺序是无序的，但所有线程都只能看到一个一致的整体执行顺序。以上图为例，线程 A 和 B 看到的执行顺序都是：B1→A1→A2→B2→A3→B3，之所以能得到这个保证是因为<strong>顺序一致性内存模型中的每个操作必须立即对任意线程可见</strong>。</p><p>但是，在 JMM 中就没有这个保证。未同步程序在 JMM 中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致。比如，在当前线程把写过的数据缓存在本地内存中，在没有刷新到主内存之前，这个写操作仅对当前线程可见；从其他线程的角度来观察，会认为这个写操作根本没有被当前线程执行。只有当前线程把本地内存中写过的数据刷新到主内存之后，这个写操作才能对其他线程可见。在这种情况下，当前线程和其他线程看到的操作执行顺序将不一致。</p><p>请看下面代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面示例代码中，假设 A 线程执行<code>writer()</code>方法后，B 线程执行<code>reader()</code>方法。 这是一个正确同步的多线程程序。根据 JMM 规范，该程序的执行结果将与该程序在顺序一致性模型中的执行结果相同。下面是该程序在两个内存模型中的执行时序对比图，</p><p><img src="https://i.loli.net/2020/01/10/eGSmvun3lMH642T.png" alt="Snipaste_2019-07-01_21-54-44.png"></p><p><strong>顺序一致性模型中，所有操作完全按程序的顺序串行执行</strong>。而在 JMM 中，临界区内的代码可以重排序（但 JMM 不允许临界区内的代码“逸出”到临界区之外，那样会破坏监视器的语义）。JMM 会在退出临界区和进入临界区这两个关键时间点做一些特别处理，使得线程在这两个时间点具有与顺序一致性模型相同的内存视图。虽然线程 A 在临界区内做了重排序，但由于监视器互斥执行的特性，这里的线程 B 根本无法观察到线程 A 在临界区内的重排序。这种重排序既提高了执行效率，又没有改变程序的执行结果。</p><blockquote><p>从这里我们可以看到，JMM 在具体实现上的基本方针为：在不改变（正确同步的）程序执行结果的前提下，尽可能地为编译器和处理器的优化打开方便之门。</p></blockquote><p>对于未同步或未正确同步的多线程程序，JMM 只提供<strong>最小安全性</strong>：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值（0， Null， False） ，JMM 保证线程读操作读取到的值不会无中生有的冒出来。为了实现最小安全性，JVM 在堆上分配对象时，首先会对内存空间进行清零，然后才会在上面分配对象（JVM 内部会同步这两个操作）。因此，在已清零的内存空间分配对象时，域的默认初始化已经完成了。</p><p>JMM 不保证未同步程序的执行结果与该程序在顺序一致性模型中的执行结果一致。因为如果想要保证执行结果一致，JMM 需要禁止大量的处理器和编译器的优化，这对程序的执行性能会产生很大的影响。而且未同步程序在顺序一致性模型中执行时，整体是无序的，其执行结果往往无法预知。而且，保证未同步程序在这两个模型中的执行结果一致没什么意义。</p><p>未同步程序在 JMM 中的执行时，整体上是无序的，其执行结果无法预知。未同步程序在两个模型中的执行特性有如下几个差异。</p><ul><li>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而 JMM 不保证单线程内的操作会按程序的顺序执行（比如上面正确同步的多线程程序在临界区内的重排序）。</li><li>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而 JMM 不保证所有线程能看到一致的操作执行顺序。</li><li>JMM 不保证对 64 位的 long 型和 double 型变量的写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。</li></ul><p>第三点差异与处理器总线的工作机制密切相关。在计算机中，数据通过总线在处理器和内存之间传递。每次处理器和内存之间的数据传递都是通过一系列步骤来完成的，这一系列步骤称之为<strong>总线事务</strong>。总线事务包括读事务和写事务。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事务。在一个处理器执行总线事务期间，总线会禁止其他的处理器和I/O设备执行内存的读/写。通过如下示意图来说明总线的工作机制。</p><p><img src="https://i.loli.net/2020/01/10/GMpYrRTe28kK36F.png" alt="Snipaste_2019-07-01_22-09-04.png"></p><p>由图可知，假设处理器 A、B 、C 同时向总线发起总线事务，这时总线仲裁会对竞争做出裁决，这里假设总线在仲裁后判定处理器 A 在竞争中获胜（总线仲裁会确保所有处理器都能公平的访问内存）。此时处理器 A 继续它的总线事务，而其他两个处理器则要等待处理器 A 的总线事务完成后才能再次执行内存访问。假设在处理器 A 执行总线事务期间（不管这个总线事务是读事务还是写事务），处理器 D 向总线发起了总线事务，此时处理器 D 的请求会被总线禁止。</p><p>总线的这些工作机制可以把所有处理器对内存的访问<strong>以串行化的方式来执行</strong>。在任意时间点，最多只能有一个处理器可以访问内存。这个特性确保了单个总线事务之中的内存读/写操作具有原子性。</p><blockquote><p>在一些 32 位的处理器上，如果要求对 64 位数据的写操作具有原子性，会有比较大的开销。为了照顾这种处理器， Java 语言规范鼓励但不强求 JVM 对 64 位的 long 型变量和 double 型变量的写操作具有原子性。当 JVM 在这种处理器上运行时，可能会<strong>把一个64位 long/double 型变量的写操作拆分为两个 32 位的写操作</strong>来执行。<strong>这两个 32 位的写操作可能会被分配到不同的总线事务中执行，此时对这个 64 位变量的写操作将不具有原子性。</strong></p></blockquote><p>当单个内存操作不具有原子性时，可能会产生意想不到后果，请看如下示意图。</p><p><img src="https://i.loli.net/2020/01/10/SFRg3loXuNbhYAf.png" alt="Snipaste_2019-07-01_22-11-26.png"></p><p>如上图所示，假设处理器 A 写一个 long 型变量，同时处理器 B 要读这个 long 型变量。处理器 A 中 64 位的写操作被拆分为两个 32 位的写操作，且这两个 32 位的写操作被分配到不同的写事务中执行。同时，处理器 B 中 64 位的读操作被分配到单个的读事务中执行。当处理器 A 和 B 按上图的时序来执行时，处理器 B 将看到仅仅被处理器 A 写了一半的无效值。</p><blockquote><p>注意，在 JSR-133 之前的旧内存模型中，一个 64 位 long/double 型变量的读/写操作可以被拆分为两个 32位的读/写操作来执行。从 JSR-133 内存模型开始（即从 JDK5 开始）， 仅仅只允许把一个 64 位 long/double 型变量的写操作拆分为两个 32 位的写操作来执行，任意的读操作在 JSR-133 中都必须具有原子性（即任意读操作必须要在单个读事务中执行）。</p></blockquote><h3 id="final-域的内存语义"><a href="#final-域的内存语义" class="headerlink" title="final 域的内存语义"></a>final 域的内存语义</h3><h4 id="final-域为基本类型"><a href="#final-域为基本类型" class="headerlink" title="final 域为基本类型"></a>final 域为基本类型</h4><p>对于 final 域，编译器和处理器要遵守两个重排序规则。</p><ul><li>在构造函数内对一个 final 域的写入，与随后把这个被构造对象的引用赋值给一个引用变量， 这两个操作之间不能重排序。</li><li>初次读一个包含 final 域的对象的引用，与随后初次读这个 final 域，这两个操作之间不能重排序。</li></ul><p>通过下面代码说明，</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 普通变量</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// final变量</span>    <span class="token keyword">static</span> Example obj<span class="token punctuation">;</span>               <span class="token keyword">public</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 构造函数</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 写普通域</span>        j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 写final域</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 写线程A执行</span>        obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 读线程B执行</span>        Example object <span class="token operator">=</span> obj<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 读对象引用</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> object<span class="token punctuation">.</span>i<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 读普通域</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> object<span class="token punctuation">.</span>j<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 读final域</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里假设一个线程 A 执行 <code>writer()</code> 方法，随后另一个线程 B 执行 <code>reader()</code> 方法。下面通过这两个线程的交互来说明这两个规则。</p><p><strong>写 final 域的重排序规则</strong></p><p>写 final 域的重排序规则禁止把 final 域的写重排序到构造函数之外。这个规则的实现包含下面 2 个方面。</p><ul><li>JMM 禁止编译器把 final 域的写重排序到构造函数之外。</li><li>编译器会在 final 域的写之后，构造函数return之前，插入一个 <strong>StoreStore 屏障</strong>。这个屏障禁止处理器把final 域的写重排序到构造函数之外。</li></ul><p>现在让我们分析 <code>writer()</code> 方法<code>。writer()</code>方法只包含一行代码：<code>obj = new Example();</code> 这行代码包含两个步骤：</p><ul><li>构造一个 <code>Example</code> 类型的对象</li><li>把这个对象的引用赋值给引用变量 <code>obj</code></li></ul><p>假设线程 B 读对象引用与读对象的成员域之间没有重排序，下图是一种可能的执行顺序。</p><p><img src="https://i.loli.net/2020/01/10/o7uanCJyvGxsqj5.png" alt="Snipaste_2019-07-02_17-18-24.png"></p><p>写普通域的操作被编译器重排序到了构造函数之外，读线程 B 错误地读取了普通变量 <code>i</code> 初始化之前的值。而写 final 域的操作，被写 final 域的重排序规则限定在了构造函数之内，读线程 B 正确地读取了 final 变量初始化之后的值。</p><p>写 final 域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的 final 域已经被正确初始化过了，而普通域不具有这个保障。以上图为例，在读线程 B 看到对象引用 <code>obj</code> 时，很可能 <code>obj</code> 对象还没有构造完成（对普通域 <code>i</code> 的写操作被重排序到构造函数外，此时初始值 1 还没有写入普通域 <code>i</code>）。</p><p><strong>读 final 域的重排序规则</strong></p><p>读 final 域的重排序规则是，在一个线程中， 初次读对象引用与初次读该对象包含的 final 域，JMM 禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。编译器会在读 final 域操作的前面插入一个 <strong>LoadLoad 屏障</strong>。</p><p>初次读对象引用与初次读该对象包含的 final 域，这两个操作之间存在<strong>间接依赖关系</strong>。由于编译器遵守间接依赖关系，因此编译器不会重排序这两个操作。大多数处理器也会遵守间接依赖，也不会重排序这两个操作。但有少数处理器允许对存在间接依赖关系的操作做重排序（比如 alpha 处理器），这个规则就是专门用来针对这种处理器的。</p><p><code>reader()</code>方法包含以下 3 个步骤：</p><ul><li>初次读引用变量<code>obj</code></li><li>初次读引用变量<code>obj</code>指向对象的普通域<code>i</code></li><li>初次读引用变量<code>obj</code>指向对象的 final 域<code>j</code></li></ul><p>现在假设写线程 A 没有发生任何重排序，同时程序在不遵守间接依赖的处理器上执行，下图是一种可能的执行顺序。</p><p><img src="https://i.loli.net/2020/01/10/6x1Rct7QrjJMvfz.png" alt="Snipaste_2019-07-02_17-27-50.png"></p><p>读对象的普通域的操作被处理器重排序到读对象引用之前。读普通域时，该域还没有被写线程 A 写入，这是一个错误的读取操作。而读 final 域的重排序规则会把读对象 final 域的操作限定在读对象引用之后，此时该 final 域已经被 A 线程初始化过了，这是一个正确的读取操作。</p><p>读 final 域的重排序规则可以确保：在读一个对象的 final 域之前，一定会先读包含这个 final 域的对象的引用。在这个示例程序中，如果该引用不为 null，那么引用对象的 final 域一定已经被 A 线程初始化过了。</p><h4 id="final-域为引用类型"><a href="#final-域为引用类型" class="headerlink" title="final 域为引用类型"></a>final 域为引用类型</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalReferenceExample</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// final是引用类型</span>    <span class="token keyword">static</span> FinalReferenceExample obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FinalReferenceExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 构造函数</span>        intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 1</span>        intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writerOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 写线程A执行</span>        obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalReferenceExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writerTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 写线程B执行</span>        obj<span class="token punctuation">.</span>intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 4</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读线程c执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 5</span>            <span class="token keyword">int</span> temp1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本例 final 域为一个引用类型，它引用一个 int 型的数组对象。对于引用类型，<strong>写 final 域的重排序规则</strong>对编译器和处理器增加了如下约束：在构造函数内对一个 final 引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p><p>对上面的示例程序，假设首先线程 A 执行<code>writerOne()</code>方法，执行完后线程 B 执行<code>writerTwo()</code>方法，执行完后线程 C 执行<code>reader()</code>方法。下图是一种可能的线程执行时序。</p><p><img src="https://i.loli.net/2020/01/10/9iASk3tJDQZcbFa.png" alt="Snipaste_2019-07-02_17-45-59.png"></p><p>1 是对 final 域的写入，2 是对这个 final 域引用的对象的成员域的写入，3 是把被构造的对象的引用赋值给某个引用变量。这里除了前面提到的 1 不能和 3 重排序外，2 和 3 也不能重排序。</p><p>JMM 可以确保读线程 C 至少能看到写线程 A 在构造函数中对 final 引用对象的成员域的写入，即 C 至少能看到数组下标 0 的值为 1。而写线程 B 对数组元素的写入，读线程 C 可能看得到，也可能看不到。JMM 不保证线程 B 的写入对读线程 C 可见，因为写线程 B 和读线程 C 之间存在数据竞争，此时的执行结果不可预知。</p><p>如果想要确保读线程 C 看到写线程 B 对数组元素的写入，写线程 B 和读线程 C 之间需要使用同步原语（lock  或 volatile）来确保内存可见性。</p><p>前面我们提到过，写 final 域的重排序规则可以确保：在引用变量为任意线程可见之前，该引用变量指向的对象的 final 域已经在构造函数中被正确初始化过了。其实，要得到这个效果，还需要一个保证：在构造函数内部，不能让这个被构造对象的引用为其他线程所见，也就是对象引用不能在构造函数中<strong>逸出</strong>。为了说明问题，来看下面的示例代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalReferenceEscapeExample</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">static</span> FinalReferenceEscapeExample obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FinalReferenceEscapeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 1 写final域</span>        obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2 this引用在此"逸出”</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">FinalReferenceEscapeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> obj<span class="token punctuation">.</span>i<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 4</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设一个线程 A 执行<code>writer()</code>方法，另一个线程 B 执行<code>reader()</code>方法。这里的操作 2 使得对象还未完成构造前就为线程 B 可见。即使这里的操作 2 是构造函数的最后一步，且在程序中操作 2 排在操作 1 后面，执行<code>read()</code>方法的线程仍然可能无法看到 final 域被初始化后的值，因为这里的操作 1 和操作 2 之间可能被重排序。实际的执行时序可能如下图所示。</p><p><img src="https://i.loli.net/2020/01/10/IQqv6RPOHen4Yhy.png" alt="Snipaste_2019-07-02_18-09-28.png"></p><p>在构造函数返回前，被构造对象的引用不能为其他线程所见，因为此时的 final 域可能还没有被初始化。在构造函数返回后，任意线程都将保证能看到 final 域正确初始化之后的值。</p><blockquote><p>上面我们提到，<strong>写 final 域的重排序</strong>规则会要求编译器在 final 域的写之后，构造函数 return 之前插入一个StoreStore 障屏。<strong>读 final 域的重排序</strong>规则要求编译器在读 final 域的操作前面插入一个 LoadLoad 屏障。<br>由于 X86 处理器不会对写后写操作做重排序，所以在 X86 处理器中，写 final 域需要的 StoreStore 障屏会被省略掉。同样，由于 X86 处理器不会对存在间接依赖关系的操作做重排序，所以在 X86 处理器中，读 final 域需要的 LoadLoad 屏障也会被省略掉。也就是说，在 X86 处理器中，final 域的读/写不会插入任何内存屏障！</p></blockquote><p>在旧的 Java 内存模型中，一个最严重的缺陷就是线程可能看到 final 域的值会改变。比如，一个线程当前看到一个整型 final 域的值为 0 （还未初始化之前的默认值）， 过一段时间之后这个线程再去读这个 final 域的值时，却发现值变为 1 （被某个线程初始化之后的值）。最常见的例子就是在旧的 Java 内存模型中，String 的值可能会改变。为了修补这个漏洞，JSR-133 增强了 final 的语义。通过为 final 域增加写和读重排序规则，可以为 Java 程序员提供初始化安全保证：只要对象是正确构造的（被构造对象的引用在构造函数中没有<strong>逸出</strong>），那么不需要使用同步（指 lock 和 volatile 的使用）就可以保证任意线程都能看到这个 final 域在构造函数中被初始化之后的值。</p><h2 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h2><p>当访问共享的可变数据时，通常需要使用同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程内访问数据，就不需要同步。这种技术被称为<strong>线程封闭</strong>（Thread Confinement），它是实现线程安全性的最简单方式之一。当某个对象封闭在一个线程中时，这种用法将自动实现线程安全性，即使被封闭的对象本身不是线程安全的。</p><p>线程封闭技术的一种常见应用是 JDBC 的<code>Connection</code>对象。JDBC 规范并不要求<code>Connection</code>对象必须是线程安全的。在典型的服务器应用程序中，线程从连接池中获得一个<code>Connection</code>对象，并且用该对象来处理请求，使用完后再将对象返还给连接池。由于大多数请求都是由单个线程采用同步的方式来处理，并且在<code>Connection</code>对象返回之前，连接池不会再将它分配给其他线程，因此，这种连接管理模式在处理请求时隐含地将<code>Connection</code>对象封闭在线程中。</p><p>在 Java 中并没有强制规定某个变量必须由锁来保护，同样在 Java 中也无法强制将对象封闭在某个线程中。线程封闭是在程序设计中的一个考虑因素，必须在程序中实现。Java 及其核心库提供了一些机制来帮助维持线程封闭性，例如局部变量和<code>ThreadLocal</code>类，但即便如此，我们仍然需要负责确保封闭在线程中的对象不会从线程中逸出。</p><h3 id="Ad-hoc-线程封闭"><a href="#Ad-hoc-线程封闭" class="headerlink" title="Ad-hoc 线程封闭"></a>Ad-hoc 线程封闭</h3><p><strong>Ad-hoc 线程封闭是指，维护线程封闭性的职责完全由程序实现来承担。</strong>Ad-hoc 线程封闭是非常脆弱的，因为没有任何一种语言特性，例如可见性修饰符或局部变量，能将对象封闭到目标线程上。事实上，对线程封闭对象的引用通常保存在公有变量中。</p><p>当决定使用线程封闭技术时，通常是因为要将某个特定的子系统实现为一个单线程子系统。在某些情况下，单线程子系统提供的简便性要胜过 Ad-hoc 线程封闭技术的脆弱性。</p><p>在<code>volatile</code>变量上存在一种特殊的线程封闭。只要你能确保只有<strong>单个线程对共享的<code>volatile</code>变量执行写入操作</strong>，那么就可以安全地在这些共享的<code>volatile</code>变量上执行“读取—修改—写入”的操作。在这种情况下，相当于将修改操作封闭在单个线程中以防止发生竞争，并且<code>volatile</code>变量的可见性保证还确保了其他线程能看到最新的值。</p><p>由于 Ad-hoc 线程封闭技术的脆弱性，因此在程序中尽量少用它，在可能的情况下，应该使用下面两种更强的线程封闭技术。</p><h3 id="栈封闭"><a href="#栈封闭" class="headerlink" title="栈封闭"></a>栈封闭</h3><p>栈封闭是线程封闭的一种特例，<strong>在栈封闭中，只能通过局部变量才能访问对象</strong>。正如封装能使得代码更容易维持不变性条件那样，同步变量也能使对象更易于封闭在线程中。局部变量的固有属性之一就是封闭在执行线程中。它们位于执行线程的栈中，其他线程无法访问这个栈。栈封闭（也被称为线程内部使用或者线程局部使用）比Ad-hoc 线程封闭更易于维护，也更加健壮。</p><p>对于基本类型的局部变量，无论如何都不会破坏栈封闭性。由于任何方法都无法获得对基本类型的引用，因此Java 的这种语义就确保了<strong>基本类型的局部变量始终封闭在线程内</strong>。</p><h3 id="ThreadLocal-线程封闭"><a href="#ThreadLocal-线程封闭" class="headerlink" title="ThreadLocal 线程封闭"></a>ThreadLocal 线程封闭</h3><p>维持线程封闭性的一种更规范方法是使用<strong><code>ThreadLocal</code>类</strong>，这个类能<strong>使线程中的某个值与保存值的对象关联起来</strong>。<code>ThreadLocal</code>提供了<code>get</code> 与<code>set</code>等访问接口或方法，这些方法为每个使用该变量的线程都存有一份独立的副本，因此<code>get</code>总是返回由当前执行线程在调用<code>set</code>时设置的最新值。</p><p><code>ThreadLocal</code>对象通常用于防止对可变的单实例变量或全局变量进行共享。例如，在单线程应用程序中可能会维持一个全局的数据库连接，并在程序启动时初始化这个连接对象，从而避免在调用每个方法时都要传递一个<code>Connection</code>对象。由于 JDBC 的连接对象不一定是线程安全的，因此，当多线程应用程序在没有协同的情况下使用全局变量时，就不是线程安全的。<strong>通过将 JDBC 的连接保存到<code>ThreadLocal</code>对象中，每个线程都会拥有属于自己的连接。</strong></p><p>当某个频繁执行的操作需要一个临时对象，例如一个缓冲区，而同时又希望避免在每次执行时都重新分配该临时对象，就可以使用这项技术。例如，在 Java5 之前，<code>Integer.toString()</code>方法使用<code>ThreadLocal</code>对象来保存一个 12 字节大小的缓冲区，用于对结果进行格式化，而不是使用共享的静态缓冲区（这需要使用锁机制）或者在每次调用时都分配一个新的缓冲区。</p><p>假设你需要将一个单线程应用程序移植到多线程环境中，通过将共享的全局变量转换为<code>ThreadLocal</code>对象，可以维持线程安全性。然而，如果将应用程序范围内的缓存转换为线程局部的缓存，就不会有太大作用。</p><p>在实现应用程序框架时大量使用了<code>ThreadLocal</code>。 例如，在 EJB 调用期间，J2EE 容器需要将一个事务上下文与某个执行中的线程关联起来。通过将事务上下文保存在静态的<code>ThreadLocal</code>对象中，可以很容易地实现这个功能：当框架代码需要判断当前运行的是哪一个事务时，只需从这个<code>ThreadLocal</code>对象中读取事务上下文。这种机制很方便，因为它避免了在调用每个方法时都要传递执行上下文信息，然而这也将使用该机制的代码与框架耦合在一起。开发人员经常滥用<code>ThreadLocal</code>，例如将所有全局变量都作为<code>ThreadLocal</code>对象，或者作为一种“隐藏”方法参数的手段。<code>ThreadLocal</code>变量类似于全局变量，它能降低代码的可重用性，并在类之间引入隐含的耦合性，因此在使用时要格外小心。</p><h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2><h3 id="处理器实现原子操作"><a href="#处理器实现原子操作" class="headerlink" title="处理器实现原子操作"></a>处理器实现原子操作</h3><ul><li><strong>使用总线锁保证原子性</strong></li></ul><p>所谓<strong>总线锁</strong>就是使用处理器提供的一个 LOCK 信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞，那么该处理器可以独占共享内存。</p><ul><li><strong>使用缓存锁保证原子性</strong></li></ul><p>在同一时刻，我们只需保证对内存地址的操作是原子性即可，但总线锁把 CPU 和内存之间的通信锁住了，这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁的开销比较大，目前处理器在某些场合下使用缓存锁代替总线锁来进行优化。</p><p>频繁使用的内存会缓存在处理器的高速缓存中，那么原子操作就可以在内部缓存中进行，并不需要声明总线锁。</p><p>所谓<strong>缓存锁</strong>是指内存区域如果被缓存在处理器的缓存行中，并且在 LOCK 操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上输出 LOCK 信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改两个及以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行，会使缓存行无效。</p><p>以下情况处理器不会使用缓存锁：</p><ol><li>当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行时，则处理器会调用总线锁定。</li><li>有些处理器不支持缓存锁定。</li></ol><h3 id="Java-实现原子操作"><a href="#Java-实现原子操作" class="headerlink" title="Java 实现原子操作"></a>Java 实现原子操作</h3><h4 id="使用循环-CAS-实现原子操作"><a href="#使用循环-CAS-实现原子操作" class="headerlink" title="使用循环 CAS 实现原子操作"></a>使用循环 CAS 实现原子操作</h4><p>JVM 中的 CAS 操作是利用了处理器提供的 CPMXCHG 指令实现的。自旋 CAS 实现的基本思路是循环进行 CAS 操作直到成功为止，以下代码实现了一个基于 CAS 线程安全的计数器方法<code>safeCount</code>和一个非线程安全的计数器方法<code>count</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicInteger atomicI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Counter cas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cas<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cas<span class="token punctuation">.</span><span class="token function">safeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等待所有线程执行完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>atomicI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用CAS实现线程安全计数器     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">safeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> atomicI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> suc <span class="token operator">=</span> atomicI<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 非线程安全计数器     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果输出：</p><p>988620</p><p>1000000</p></blockquote><p>其实上面实现的线程安全的计数器方法<code>safeCount</code>就是 Java 中 CAS 的实现原理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">return</span> current<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先变量<code>value</code>使用了<code>volatile</code>修饰，这就保证了可见性与有序性，<code>getAndIncrement</code>采用 CAS 操作，每次从内存中读取数据将数据进行 +1 操作，然后对原数据 +1 后的结果进行 CAS 操作，成功的话返回结果，否则重试直到成功为止。其中调用了<code>compareAndSet</code>利用 JNI 来完成 CPU 的操作。</p><p><code>compareAndSwapInt</code>是借助 C++ 来调用 CPU 底层指令实现的。下面从分析比较常用的 CPU (intel x86) 来解释 CAS 的实现原理。下面是<code>sun.misc.Unsafe</code>类的<code>compareAndSwapInt()</code>方法的源代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>                                               <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再看下在 JDK 中依次调用的 C++ 代码为：</p><pre class="line-numbers language-c++"><code class="language-c++">#define LOCK_IF_MP(mp) __asm cmp mp, 0  \                       __asm je L0      \                       __asm _emit 0xF0 \                       __asm L0:inline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {  // alternative for InterlockedCompareExchange  int mp = os::is_MP();  __asm {    mov edx, dest    mov ecx, exchange_value    mov eax, compare_value    LOCK_IF_MP(mp)    cmpxchg dword ptr [edx], ecx  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面源代码所示，程序会根据当前处理器的类型来决定是否为 cmpxchg 指令添加 lock 前缀。如果程序是在多处理器上运行，就为 cmpxchg 指令加上 lock 前缀。反之，如果程序是在单处理器上运行，就省略 lock 前缀（单处理器自身会维护单处理器内的顺序一致性，不需要 lock 前缀提供的内存屏障效果）。</p><h4 id="CAS-实现原子操作的三大问题"><a href="#CAS-实现原子操作的三大问题" class="headerlink" title="CAS 实现原子操作的三大问题"></a>CAS 实现原子操作的三大问题</h4><ul><li><strong>ABA 问题</strong></li></ul><p>因为 CAS 需要在操作值得时候，检查值有没有发生变化，如果没有发生变化则更新，但是比如说当线程 1 从内存位置 V 中取出 A，这时候另一个线程 2 也从内存中取出 A，并且线程 2 进行了一些操作变成了 B，然后线程 2 又将 V 位置的数据变成 A，这时候线程 1 进行 CAS 操作发现内存中仍然是 A，然后线程 1 操作成功。尽管线程 1 的 CAS 操作成功，但可能存在潜藏的问题，如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-17_20-54-17.jpg" alt=""></p><p>如图 1，现在有一个堆栈，栈顶为 A，这时线程 1 知道<code>A.next = B</code>，希望用 CAS 将栈顶替换成 B。但是在线程 1 执行前，线程 2 介入了，将 A 和 B 出栈，让 DCA 入栈，此时的堆栈如图 2，B 此时处于游离状态，线程 2 执行结束，又轮到线程 1 执行 CAS 操作，检测发现栈顶仍然是 A，所以 CAS 操作成功，栈顶变为 B，但实际上此时堆栈中只剩下 B 了，如图 3 所示。这样的操作结果是错误的，这种现象就是 <strong>ABA 现象</strong>。</p><p>ABA 问题的解决思路就是<strong>使用版本号</strong>，在变量前追加版本号，每次变量更新的时候把版本号加 1，那么 A-B-A问题就变成了 1A-2B-3A。</p><p>为了解决 ABA 问题，从 Java5 开始<code>atomic</code>包里提供了一个类<code>AtomicStampedReference</code>，这个类的<code>compareAndSet</code>方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span>    V      expectedReference<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 预期引用</span>    V      newReference<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 更新后的引用</span>    <span class="token keyword">int</span>    expectedStamp<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 预期标志</span>    <span class="token keyword">int</span>    newStamp              <span class="token comment" spellcheck="true">// 更新后的标志</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>循环时间长开销大</strong></li></ul><p>自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销。如果 JVM 能支持处理器提供的 pause 指令，那么效率会有一定的提升。</p><p>pause 指令有两个作用：</p><ol><li>它可以延迟流水线执行指令，使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。</li><li>它可以避免在退出循环的时候因内存顺序冲突，而引起 CPU 流水线被清空，从而提高 CPU 的执行效率。</li></ol><ul><li><strong>只能保证一个共享变量的原子操作</strong></li></ul><p>当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量<code>i＝2, j=a</code>，合并一下<code>ij=2a</code>，然后用 CAS 来操作<code>ij</code>。从Java5 开始提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS 操作。</p><h4 id="使用锁机制实现原子操作"><a href="#使用锁机制实现原子操作" class="headerlink" title="使用锁机制实现原子操作"></a>使用锁机制实现原子操作</h4><p>锁机制保证了只有获取锁的线程才能够操作锁定的内存区域。JVM 内部实现了很多种锁机制，有偏向锁、轻量级锁和互斥锁。有意思的是除了偏向锁，JVM 实现锁的方式都用了循环 CAS，即当一个线程想进入同步块的时候使用循环 CAS 的方式来获取锁，当它退出同步块的时候使用循环 CAS 释放锁。</p><h2 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h2><h3 id="什么是伪共享"><a href="#什么是伪共享" class="headerlink" title="什么是伪共享"></a>什么是伪共享</h3><p>为了解决计算机系统中主内存与 CPU 之间运行速度差问题，会在 CPU 与主内存之间添加一级或者多级高速缓冲存储器(Cache)。这个 Cache 一般是被集成到 CPU 内部的，所以也叫 CPU Cache，下图所示是两级 Cache 结构。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-17_21-02-54.jpg" alt=""></p><p>在 Cache 内部是按行存储的，其中每一行称为一个 Cache 行。Cache 行是 Cache 与主内存进行数据交换的单位，Cache 行的大小一般为 2 的次幂数字节。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-17_21-05-49.jpg" alt=""></p><p>当 CPU 访问某个变量时，首先会去看 Cache 内是否有该变量，如果有则直接从中获取，否则就去主内存里面获取该变量，然后把该变量所在内存区域的一个 Cache 行大小的内存复制到 Cache 中。由于存放到 Cache 行的是内存块而不是单个变量，所以可能会把多个变量存放到一个 Cache 行中。当多个线程同时修改一个缓存行里面的多个变量时，由于同时只能有一个线程操作缓存行，所以相比将每个变量放到一个缓存行，性能会有所下降，这就是<strong>伪共享</strong>，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-17_21-54-50.jpg" alt=""></p><p>在上图中，变量 x 和 y 同时被放到了 CPU 的一级和二级缓存，当线程 1 使用 CPU1 对变量 x 进行更新时，首先会修改 CPU1 的一级缓存变量 x 所在的缓存行，这时候在缓存一致性协议下， CPU2 中变量 x 对应的缓存行失效。那么线程 2 在写入变量 x 时就只能去二级缓存里查找，这就破坏了一级缓存。而一级缓存比二级缓存更快，这也说明了多个线程不可能同时去修改自己所使用的 CPU 中相同缓存行里面的变量。更坏的情况是，如果 CPU 只有一级缓存，则会导致频繁地访问主内存。</p><h3 id="为何会出现伪共享"><a href="#为何会出现伪共享" class="headerlink" title="为何会出现伪共享"></a>为何会出现伪共享</h3><p><strong>伪共享的产生是因为多个变量被放入了一个缓存行中，并且多个线程同时去写入缓存行中不同的变量。</strong>那么为何多个变量会被放入一个缓存行呢？其实是因为缓存与内存交换数据的单位就是缓存行，当 CPU 要访问的变量没有在缓存中找到时，根据程序运行的<a href="https://dwz.cn/QGJkGhcj" target="_blank" rel="noopener">局部性原理</a>，会把该变量所在内存中大小为缓存行的内存放入缓存行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token keyword">long</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> c<span class="token punctuation">;</span><span class="token keyword">long</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码声明了四个 long 变量，假设缓存行的大小为 32 字节，那么当 CPU 访问变量<code>a</code>时，发现该变量没有在缓存中，就会去主内存把变量<code>a</code>以及内存地址附近的<code>b</code>、<code>c</code>、<code>d</code>放入缓存行，也就是地址连续的多个变量有可能会被放到一个缓存行中。当创建数组时，数组里面的多个元素就会被放入同一个缓存行。那么在单线程下多个变量被放入同一个缓存行对性能有影响吗？其实在正常情况下单线程访问时将数组元素放入一个或者多个缓存行对代码执行是有利的，因为数据都在缓存中，代码执行会更快。</p><p>看如下两个示例程序，执行结果就不一样了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// (1)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestForContent</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LINE_NUM <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COLUM_NUM <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>LINE_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>COLUM_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LINE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLUM_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"use time:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// (2)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestForContent2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LINE_NUM <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COLUM_NUM <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>LINE_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>COLUM_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLUM_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 区别在这里</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> LINE_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"use time:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行代码 (1) 只需要 111ms，而执行代码 (2) 需要 1879ms。显然代码 (1) 比代码 (2) 执行得快，这是因为代码 (1) 是按照存储元素的顺序按列访问的，数组内数组元素的内存地址是连续的，当访问数组第一个元素时， 会把第一个元素后的若干元素一块放入缓存行，这样顺序访问数组元素时会在缓存中直接命中，因而就不会去主内存读取了，后续访问也是这样。也就是说，当顺序访问数组里面元素时，如果当前元素在缓存没有命中，那么会从主内存一下子读取后续若干个元素到缓存，也就是一次内存访问可以让后面多次访问直接在缓存中命中。而代码 (2) 是按行访问数组元素的，不是顺序的，这破坏了程序访问的局部性原则，并且缓存是有容量控制的，当缓存满了时会根据一定淘汰算法替换缓存行，这会导致从内存置换过来的缓存行的元素还没等到被读取就被替换掉了。所以在单个线程下顺序修改一个缓存行中的多个变量，会充分利用程序运行的局部性原则，从而加速了程序的运行。而在多线程下并发修改一个缓存行中的多个变量时就会竞争缓存行，从而降低程序运行性能。</p><h3 id="如何避免伪共享"><a href="#如何避免伪共享" class="headerlink" title="如何避免伪共享"></a>如何避免伪共享</h3><p>在 JDK8 之前一般都是通过<strong>字节填充</strong>的方式来避免该问题，也就是创建一个变量时使用填充字段填充该变量所在的缓存行，这样就避免了将多个变量存放在同一个缓存行中，如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FilledLong</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p6<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如缓存行为 64 字节，那么我们在<code>FilledLong</code>类里面填充了 6 个 long 类型的变量，每个 long 类型变量占用 8 字节，加上<code>value</code>变量的 8 字节总共56字节。另外，这里<code>FilledLong</code>是一个类对象，而类对象的字节码的对象头占用 8 字节，所以一个<code>FilledLong</code>对象实际会占用 64 字节的内存，这正好可以放入一个缓存行。</p><p>JDK8 提供了一个<code>sun.misc.Contended</code>注解，用来解决伪共享问题。将上面代码修改为如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Contended</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FilledLong</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value <span class="token operator">=</span> 0L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个注解也可以用来修饰变量，比如在<code>Thread</code>类中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** The current seed for a ThreadLocalRandom */</span><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span><span class="token keyword">long</span> threadLocalRandomSeed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Probe hash value; nonzero if threadLocalRandomSeed initialized */</span><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span><span class="token keyword">int</span> threadLocalRandomProbe<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Secondary seed isolated from public ThreadLocalRandom sequence */</span><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span><span class="token keyword">int</span> threadLocalRandomSecondarySeed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Thread</code>类里面这三个变量默认被初始化为 0，这三个变量会在<code>ThreadLocalRandom</code>类中使用。需要注意的是，在默认情况下， <code>@Contended</code>注解只用于 Java 核心类，比如 <code>rt</code> 包下的类。如果用户类路径下的类需要使用这个注解，则需要添加 JVM 参数：<code>-XX:-RestrictContended</code>。填充的宽度默认为 128，要自定义宽度则可以设置 <code>-XX:ContendedPaddingWidth</code> 参数。</p><h2 id="锁的介绍"><a href="#锁的介绍" class="headerlink" title="锁的介绍"></a>锁的介绍</h2><p>参考<a href="https://blog.csdn.net/MeituanTech/article/details/98744751" target="_blank" rel="noopener">https://blog.csdn.net/MeituanTech/article/details/98744751</a></p><h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在 Java 和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，<strong>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据</strong>，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。在 Java 中，<code>synchronized</code>关键字和<code>Lock</code>的实现类都是悲观锁。</p><p><strong>乐观锁认为自己在使用数据时不会有别的线程修改数据</strong>，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（报错或者自动重试）。</p><p>乐观锁在 Java 中是通过使用<strong>无锁编程</strong>来实现，最常采用的是 <strong>CAS 算法</strong>，Java 原子类中的递增操作就通过 CAS 自旋实现的。</p><p><img src="https://i.loli.net/2020/02/18/q35KuFkNcUCnd4l.jpg" alt="Snipaste_2020-02-18_12-40-15.png"></p><h3 id="自旋锁和适应性自旋锁"><a href="#自旋锁和适应性自旋锁" class="headerlink" title="自旋锁和适应性自旋锁"></a>自旋锁和适应性自旋锁</h3><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态（用户态转为内核态）来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃 CPU 的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是<strong>自旋锁</strong>。</p><p><img src="https://i.loli.net/2020/02/18/oOv27DlfR5hH8me.jpg" alt="Snipaste_2020-02-18_13-30-44.png"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用<code>-XX:PreBlockSpin</code>来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁在 JDK1.4 中引入，使用<code>-XX:+UseSpinning</code>来开启。JDK1.6 中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><h3 id="无锁-偏向锁-轻量级锁-重量级锁"><a href="#无锁-偏向锁-轻量级锁-重量级锁" class="headerlink" title="无锁/偏向锁/轻量级锁/重量级锁"></a>无锁/偏向锁/轻量级锁/重量级锁</h3><p>这四种锁是指锁的状态，专门针对<code>synchronized</code>的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p><p>首先为什么<code>synchronized</code>能实现线程同步？</p><p>在回答这个问题之前我们需要了解两个重要的概念：<strong>Java 对象头</strong>、<strong>Monitor</strong>。</p><p><strong>Java对象头</strong></p><blockquote><p><code>synchronized</code>是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在 Java 对象头里的，而 Java 对象头又是什么呢？</p><p>我们以 Hotspot 虚拟机为例，Hotspot 的对象头主要包括两部分数据：Mark Word(标记字段)、Class Pointer(类型指针)。</p><p><strong>Mark Word</strong>：默认存储对象的 HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以 Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间 Mark Word 里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Class Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p></blockquote><p><strong><em>Monitor</em></strong></p><blockquote><p>Monitor 可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个 Java 对象就有一把看不见的锁，称为内部锁或者 Monitor 锁。</p><p>Monitor 是线程私有的数据结构，每一个线程都有一个可用 monitor record 列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个 monitor 关联，同时 monitor 中有一个 Owner 字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p></blockquote><p>现在话题回到<code>synchronized</code>，<code>synchronized</code>通过 Monitor 来实现线程同步，Monitor 是依赖于底层的操作系统的 Mutex Lock(互斥锁)来实现的线程同步。</p><p>就像我们在自旋锁中提到的“阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是<code>synchronized</code>最初实现同步的方式，这就是 JDK6 之前<code>synchronized</code>效率低的原因。这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为<strong>重量级锁</strong>，JDK6 中为了减少获得锁和释放锁带来的性能消耗，引入了<strong>偏向锁</strong>和<strong>轻量级锁</strong>。</p><p>所以目前锁一共有 4 种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。<strong>锁状态只能升级不能降级。</strong></p><p>通过上面的介绍，我们对<code>synchronized</code>的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的 Mark Word 内容，然后再分别讲解四种锁状态的思路以及特点。</p><table><thead><tr><th>锁状态</th><th>存储内容</th><th>存储内容</th></tr></thead><tbody><tr><td>无锁</td><td>对象的 hashcode、对象分代年龄、是否是偏向锁（0）</td><td>01</td></tr><tr><td>偏向锁</td><td>偏向线程 ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td><td>01</td></tr><tr><td>轻量级锁</td><td>指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td>指向互斥锁（重量级锁）的指针</td><td>10</td></tr></tbody></table><p><strong>无锁</strong></p><p><strong>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</strong></p><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的 CAS 原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p><p><strong>偏向锁</strong></p><p><strong>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</strong></p><p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><p>当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。<strong>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径</strong>，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。</p><p><strong>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。</strong>偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p><p><strong>轻量级锁</strong></p><p><strong>当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</strong></p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录(Lock Record)的空间，用于存储锁对象目前的 Mark Word 的拷贝，然后拷贝对象头中的 Mark Word 复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用 CAS 操作尝试将对象的 Mark Word 更新为指向 Lock Record 的指针，并将 Lock Record 里的 Owner 指针指向对象的 Mark Word。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象 Mark Word 的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的 Mark Word 是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p><strong>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</strong></p><p><strong>重量级锁</strong></p><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p>整体的锁状态升级流程如下：</p><p><img src="https://i.loli.net/2020/02/18/dhu4QRivb1oszjt.jpg" alt="Snipaste_2020-02-18_14-14-43.png"></p><p>综上，偏向锁通过对比 Mark Word 解决加锁问题，避免执行 CAS 操作。而轻量级锁是通过用 CAS 操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p><strong>公平锁</strong>是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p><strong>非公平锁</strong>是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以<strong>非公平锁有可能出现后申请锁的线程先获取锁的场景</strong>。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p><img src="https://i.loli.net/2020/02/18/YrM28mzxW4PChVL.jpg" alt="Snipaste_2020-02-18_14-15-03.png"></p><p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p><p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p><p><img src="https://i.loli.net/2020/02/18/Bf5qC1vWtgLQRlp.jpg" alt="Snipaste_2020-02-18_14-19-52.png"></p><h3 id="可重入锁和非可重入锁"><a href="#可重入锁和非可重入锁" class="headerlink" title="可重入锁和非可重入锁"></a>可重入锁和非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者 Class），不会因为之前已经获取过还没释放而阻塞。Java 中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，类中的两个方法都是被内置锁<code>synchronized</code>修饰的，<code>doSomething()</code>方法中调用<code>doOthers()</code>方法。因为内置锁是可重入的，所以同一个线程在调用<code>doOthers()</code>时可以直接获得当前对象的锁，进入<code>doOthers()</code>进行操作。</p><p>如果是一个不可重入锁，那么当前线程在调用<code>doOthers()</code>之前需要将执行<code>doSomething()</code>时获取当前对象的锁释放掉。实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p><p>为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示来分析。</p><p><img src="https://i.loli.net/2020/02/18/PxpRnBr1sH5oTau.jpg" alt="Snipaste_2020-02-18_14-32-59.png"></p><p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p><p><img src="https://i.loli.net/2020/02/18/1FzOBvsmKCL2PqA.jpg" alt="Snipaste_2020-02-18_14-33-24.png"></p><p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p><h3 id="独享锁和共享锁"><a href="#独享锁和共享锁" class="headerlink" title="独享锁和共享锁"></a>独享锁和共享锁</h3><p>独享锁和共享锁同样是一种概念。独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程 T 对数据 A 加上排它锁后，则其他线程不能再对 A 加任何类型的锁。<strong>获得排它锁的线程既能读数据又能修改数据</strong>。JDK 中的<code>synchronized</code>和<code>Lock</code>的实现类就是排他锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程 T 对数据 A 加上共享锁后，则其他线程只能对 A 再加共享锁，不能加排它锁。<strong>获得共享锁的线程只能读数据，不能修改数据</strong>。典型的就是<code>ReentrantReadWriteLock</code>里的读锁，它的读锁是可以被共享的，但是它的写锁每次只能被独享。</p><p>独享锁与共享锁也是通过 <code>AQS</code> 来实现的，通过实现不同的方法，来实现独享或者共享。</p><h3 id="互斥锁和读写锁"><a href="#互斥锁和读写锁" class="headerlink" title="互斥锁和读写锁"></a>互斥锁和读写锁</h3><p>互斥锁指的是在访问共享资源之前对进行加锁操作，在访问完成之后进行解锁操作。 加锁后，任何其他试图再次加锁的线程会被阻塞，直到当前进程解锁。如果解锁时有一个以上的线程阻塞，那么所有该锁上的线程都被编程就绪状态， 第一个变为就绪状态的线程又执行加锁操作，那么其他的线程又会进入等待。 在这种方式下，只有一个线程能够访问被互斥锁保护的资源。</p><p><strong>读写锁既是互斥锁，又是共享锁，读模式是共享，写模式是互斥的。</strong></p><p>读写锁有三种状态：读加锁状态、写加锁状态和不加锁状态。</p><p>只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁。</p><h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><p>分段锁其实是一种锁的设计，并不是具体的一种锁，对于<code>ConcurrentHashMap</code>而言，其并发的实现就是通过分段锁的形式来实现高效的并发操作。并发容器类的加锁机制是基于粒度更小的分段锁，分段锁也是提升多并发程序性能的重要手段之一。</p><p>在并发程序中，串行操作是会降低可伸缩性，并且上下文切换也会减低性能。在锁上发生竞争时将导致这两种问题，使用独占锁时保护受限资源的时候，基本上是采用串行方式—每次只能有一个线程能访问它。所以对于可伸缩性来说最大的威胁就是独占锁。</p><p>一般有三种方式<strong>降低锁的竞争程度</strong>： </p><ul><li>减少锁的持有时间 </li><li>降低锁的请求频率 </li><li>使用带有协调机制的独占锁，这些机制允许更高的并发性</li></ul><p>在某些情况下我们可以将锁分解技术进一步扩展为一组独立对象上的锁进行分解，这称为<strong>分段锁</strong>。</p><p>说的简单一点就是，容器里有多把锁，每一把锁用于锁容器中的一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是<code>ConcurrentHashMap</code>所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个数据段的数据时，其他数据段的数据能被其他线程访问。</p><blockquote><p>在<code>ConcurrentHashMap</code>中使用了一个包含 16 个锁的数组，每个锁保护所有散列桶的 1/16，其中第 N 个散列桶由第 <em>N mod 16</em> 个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到原来的 1/16。也正是这项技术使得<code>ConcurrentHashMap</code>支持多达 16 个并发的写入线程。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 重排序 </tag>
            
            <tag> 伪共享 </tag>
            
            <tag> CAS </tag>
            
            <tag> JMM </tag>
            
            <tag> synchronized </tag>
            
            <tag> volatile </tag>
            
            <tag> happen-before </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/posts/967.html"/>
      <url>/posts/967.html</url>
      
        <content type="html"><![CDATA[<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>保存当前指针<code>cur</code>的前一个指针<code>prev</code>和后一个指针<code>next</code>，<code>prev</code>初始化指向<code>null</code>。当反转时，让<code>cur</code>的下一个指针指向<code>prev</code>，接着让<code>prev</code>指向<code>cur</code>，<code>cur</code>指向<code>next</code>，<code>next</code>指向自身下一个指针。以此循环直到<code>cur</code>为<code>null</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-14_14-32-05.jpg" alt=""></p><p>代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        val <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>    ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-14_18-25-50.jpg" alt=""></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 递归终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// head->next此刻指向head后面的链表的尾节点</span>    <span class="token comment" spellcheck="true">// head->next->next = head把head节点放在了尾部</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算的前世今生</title>
      <link href="/posts/51072.html"/>
      <url>/posts/51072.html</url>
      
        <content type="html"><![CDATA[<h2 id="云计算的由来"><a href="#云计算的由来" class="headerlink" title="云计算的由来"></a>云计算的由来</h2><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p><img src="https://i.loli.net/2020/02/13/fQdNH5vm4FXoAVe.png" alt="Snipaste_2020-02-13_14-39-49.png"></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p><img src="https://i.loli.net/2020/02/13/y6DsuJWgVxFAz4Y.png" alt="Snipaste_2020-02-13_14-42-10.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>云计算（Cloud Computing）的一个核心理念就是通过不断提高“云”的处理能力，进而减少用户终端的处理负担，最终使用户终端简化成一个单纯的输入输出设备，并能按需享受“云”的强大计算处理能力。</p><p>云计算（Cloud Computing）的核心思想，是将大量用网络连接的计算资源统一管理和调度，构成一个计算资源池向用户按需服务。</p><p>可能大家都听说过 <strong>IaaS</strong>、<strong>PaaS</strong>、<strong>SaaS</strong>，这是云计算的三种服务。</p><p><code>IaaS</code>是<code>Infrastructure as a Service</code>的简称，即<strong>基础设施即服务</strong>。消费者通过 Internet 可以从完善的计算机基础设施获得服务。<code>IaaS</code>公司会提供场外服务器，存储和网络硬件，也可以选择租用，节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。</p><p><code>PaaS</code>是<code>Platform-as-a-Service</code>的缩写，意思是<strong>平台即服务</strong>。把服务器平台作为一种服务提供的商业模式。某些时候也被叫做中间件。所有的开发都可以在这一层进行，节省时间与资源。<code>PaaS</code>公司可以提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，可以节省硬件上的费用。</p><p><code>SaaS</code>是<code>Software-as-a-Service</code>的简称，意思是<strong>软件即服务</strong>。也是我们目前普通用户接触最多的层面，在网络上任意一个远程服务器上的应用都是属于<code>SaaS</code>。</p><p><img src="https://i.loli.net/2020/02/13/rNqIyFwnxebfhvD.png" alt="Snipaste_2020-02-13_15-14-35.png"></p><h2 id="云计算的优势"><a href="#云计算的优势" class="headerlink" title="云计算的优势"></a>云计算的优势</h2><ul><li>超大规模</li><li>虚拟化</li><li>高可靠性</li><li>通用性</li><li>高可扩展性</li><li>按需服务</li><li>极其廉价</li></ul><h2 id="企业使用云计算的好处"><a href="#企业使用云计算的好处" class="headerlink" title="企业使用云计算的好处"></a>企业使用云计算的好处</h2><p><img src="https://i.loli.net/2020/02/13/BbQJzk642gIPtyu.png" alt="Snipaste_2020-02-13_15-17-39.png"></p><h2 id="云计算颠覆未来"><a href="#云计算颠覆未来" class="headerlink" title="云计算颠覆未来"></a>云计算颠覆未来</h2><h3 id="未来生活"><a href="#未来生活" class="headerlink" title="未来生活"></a>未来生活</h3><p>智能传感器+云计算，关爱我们的家人。</p><p><img src="https://i.loli.net/2020/02/13/pRvVmkq4PZ9oa3D.png" alt="Snipaste_2020-02-13_15-19-45.png"></p><h3 id="未来娱乐"><a href="#未来娱乐" class="headerlink" title="未来娱乐"></a>未来娱乐</h3><p>云计算带来视觉体验。</p><p><img src="https://i.loli.net/2020/02/13/vLoGtNgCruwRqD2.png" alt="Snipaste_2020-02-13_15-27-31.png"></p><h3 id="未来城市"><a href="#未来城市" class="headerlink" title="未来城市"></a>未来城市</h3><h4 id="寻找亲人"><a href="#寻找亲人" class="headerlink" title="寻找亲人"></a>寻找亲人</h4><p>云计算帮助找回失散的亲人。</p><p><img src="https://i.loli.net/2020/02/13/DzvxO3uaPtKp1Qc.png" alt="Snipaste_2020-02-13_15-29-25.png"></p><p><img src="https://i.loli.net/2020/02/13/2h9q4VOsbj68dfg.png" alt="Snipaste_2020-02-13_15-29-32.png"></p><h4 id="药品管理"><a href="#药品管理" class="headerlink" title="药品管理"></a>药品管理</h4><p>阿里健康“码上溯源”平台，收集了中国境内每盒药从生产、批发、零售环节的所有流通信息数据库规模大，查询要求快，高峰时期并发多。</p><p><img src="https://i.loli.net/2020/02/13/hsxGyQNLU3MvSfW.png" alt="Snipaste_2020-02-13_15-32-25.png"></p><p><img src="https://i.loli.net/2020/02/13/M3JQLK8pfV6NXW2.png" alt="Snipaste_2020-02-13_15-32-32.png"></p><h4 id="保护环境"><a href="#保护环境" class="headerlink" title="保护环境"></a>保护环境</h4><p>生活中的典型案例—蔚蓝地图，全社会共同守护绿色环境。</p><p><img src="https://i.loli.net/2020/02/13/sCtnigzaex2ljL1.png" alt="Snipaste_2020-02-13_15-34-18.png"></p><h4 id="12306"><a href="#12306" class="headerlink" title="12306"></a>12306</h4><p><img src="https://i.loli.net/2020/02/13/Q7MKcdZnsr6AzJ2.png" alt="Snipaste_2020-02-13_15-35-38.png"></p><h3 id="未来智能-万物互联IoT"><a href="#未来智能-万物互联IoT" class="headerlink" title="未来智能-万物互联IoT"></a>未来智能-万物互联IoT</h3><p><img src="https://i.loli.net/2020/02/13/vZghEYoR2x5DtaF.png" alt="Snipaste_2020-02-13_15-36-56.png"></p><h3 id="未来已来"><a href="#未来已来" class="headerlink" title="未来已来"></a>未来已来</h3><p><img src="https://i.loli.net/2020/02/13/qrQe5VUgH9Ok8n3.png" alt="Snipaste_2020-02-13_15-38-11.png"></p><ul><li>云计算+民生：驾照审验在家就能做</li><li>云计算+金融：贷款不必往银行跑</li><li>云计算+交通：滴滴打车、曹操专车</li><li>云计算+教育：人人可实现名校梦</li><li>云计算+穿戴设备：智能手环变身健康教练</li><li>云计算+医疗：三家一生在线问诊</li></ul><p>本文整理自<a href="https://developer.aliyun.com/course/1236" target="_blank" rel="noopener">阿里云在线课程-云计算的前世今生</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图解归并排序</title>
      <link href="/posts/18393.html"/>
      <url>/posts/18393.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次我们介绍另一种时间复杂度为<code>O(nlogn)</code>的排序算法叫做<strong>归并排序</strong>。归并排序在数据量大且数据递增或递减连续性好的情况下，效率比较高，且是<code>O(nlogn)</code>复杂度下唯一一个稳定的排序。</p><h2 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h2><blockquote><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。</p></blockquote><p>实现归并的一种直截了当的办法是将两个不同的有序数组归并到第三个数组中。实现的方法很简单，创建一个适当大小的数组然后将两个输入数组中的元素一个个从小到大放入这个数组中。但是，当用归并将一个大数组排序时，我们需要进行很多次归并，这样每次归并时都创建一个新数组来存储排序结果就会浪费空间，因此我们可以使用原地归并。</p><p><strong>原地归并的思路</strong>是：同样需要创建一个新数组作为辅助空间，但是这个数组不是用于存放归并后的结果，而是<strong>存放归并前的结果</strong>，然后将归并后的结果一个个从小到大放入原来的数组中。</p><p>原地归并的步骤如下：</p><ol><li>创建一个和需要归并的数组相同的新数组，让<code>k</code>指向原来数组的第一个位置，<code>i</code>指向新数组左半部分的第一个元素，<code>j</code>指向右半部分的一个元素。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-12_14-50-15.png" alt=""></p><ol start="2"><li>如果<code>i</code>指向的元素<code>ei</code>小于<code>j</code>指向的元素<code>ej</code>，则将<code>ei</code>放入<code>k</code>指向的位置，然后<code>i++</code>指向下一个元素，<code>k++</code>指向下一个需要存放的位置。否则如果<code>ei&gt;ej</code>，则将<code>ej</code>放入<code>k</code>指向的位置，然后<code>j++</code>指向下一个元素，<code>k++</code>指向下一个需要存放的位置。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-12_15-02-39.png" alt=""></p><ol start="3"><li>如果左半部分<code>i</code>指向的位置已经超过中间位置，而此时右半部分<code>j</code>还未移动到末尾，那么将<code>j</code>指向位置后面的所有元素都移动到<code>k</code>指向位置的后面，反之类似。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-12_16-12-20.png" alt=""></p><p>下图展示了对数组<code>[8, 7, 6, 5, 4, 3, 2, 1]</code>进行从小到大归并排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-12_15-45-51.jpg" alt=""></p><p>归并排序的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归使用归并排序,对arr[l...r]的范围进行排序</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这种写法防止溢出</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将arr[l...mid]和arr[mid+1...r]两部分进行归并</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果左半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果右半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 &lt; 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 >= 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h2><p>和快速排序一样，对于小规模数组，我们可以使用直接插入排序。其次，对于近乎有序的数组，我们可以减少归并的次数。</p><p>优化的归并排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于小规模数组, 使用插入排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span>    <span class="token comment" spellcheck="true">// 对于近乎有序的数组非常有效,但是对于一般情况,有一定的性能损失</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果左半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果右半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 &lt; 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 >= 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h2><p>我们对空间进行优化，上述归并排序由于每次调用<code>merge</code>方法都会申请新的辅助空间，递归深度过大，就会造成 OOM。</p><p>然而我们可以通过参数的方式传递给子函数，这样只需要在开始的时候申请一次辅助空间。</p><p>优化代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于小规模数组, 使用插入排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span>    <span class="token comment" spellcheck="true">// 对于近乎有序的数组非常有效,但是对于一般情况,有一定的性能损失</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果左半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果右半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 &lt; 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 >= 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h2><p>自底向上的归并排序是先归并小数组，然后成对归并得到的子数组，即先进行两两归并（把每个元素想象成大小为 1 的数组），然后是四四归并（把两个大小为 2 的数组归并成一个有 4 个元素的数组），然后是八八归并，一直下去。在每一轮归并中，最后一次归并的第二个可能比第一个子数组要小，否则所有的归并中两个数组的大小都应该一样，而在下一轮中子数组的大小会翻倍。</p><p>过程如下图，利用迭代实现：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-12_19-03-27.jpg" alt=""></p><p>自底向上的归并排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 外循环控制归并数组的大小</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">+=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内循环根据外循环分配的大小进行两两归并</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> len <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对 arr[i...i+len-1] 和 arr[i+len...i+2*len-1] 进行归并</span>            <span class="token comment" spellcheck="true">// 需要满足 i+len &lt; n 且 i+2*len-1 &lt; n</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> len <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果左半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果右半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 &lt; 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 >= 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>优化思路同上：</p><ul><li>对于小数组改用直接插入排序；</li><li>对于有序的数组减少归并的次数；</li><li>复用辅助数组空间。</li></ul><p>优化的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对于小数组, 使用插入排序优化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">+=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> len <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">+</span> len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> len <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果左半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果右半部分元素已经全部处理完毕</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 &lt; 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 左半部分所指元素 >= 右半部分所指元素</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比归并排序与快速排序：</p><ul><li>归并排序是先切分、后排序，快速排序是切分、排序交替进行。</li><li>归并排序的递归发生在处理整个数组（<strong>先递归切分再对数组排序</strong>）之前，快速排序的递归发生在处理整个数组之后（<strong>先对数组排序再递归到子数组</strong>）。</li><li>归并排序是稳定的排序，而快速排序是不稳定的排序。</li><li>归并排序在最坏和最好情况下的时间复杂度均为<code>O(nlogn)</code>，而快速排序最坏<code>O(n^2)</code>，最好<code>O(n)</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解快速排序及双路三路快速排序</title>
      <link href="/posts/6527.html"/>
      <url>/posts/6527.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前我们介绍了交换类排序中的冒泡排序，这次我们介绍另一种交换类排序叫做快速排序。快速排序的优点是原地排序，不占用额外空间，时间复杂度是<code>O(nlogn)</code>。</p><p>当然，对于快速排序来说，它也是有缺点的，它对于含有大量重复元素的数组排序效率是非常低的，时间复杂度会降为<code>O(n^2)</code>。此时需要使用改进的快速排序—双路快速排序，在双路快速排序的基础上，我们又进一步优化得到了三路快速排序。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p></blockquote><p>快速排序的步骤如下：</p><ol><li><p>把第一个元素作为分界的标定点，用<code>l</code>指向它。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_21-48-46.png" alt=""></p></li><li><p>遍历右边元素，在遍历的过程中，我们整理数组，一部分小于<code>v</code>，一部分大于<code>v</code>，用<code>j</code>指向小于<code>v</code>和大于<code>v</code>的分界点，用<code>i</code>指向当前访问的元素<code>e</code>，此时，数组<code>arr[l+1...j]&lt;v</code>，<code>arr[j+1...i-1]&gt;v</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_21-49-58.png" alt=""></p></li><li><p>若<code>e&gt;v</code>，那么直接将<code>e</code>合并在大于<code>v</code>那么部分的后面，然后<code>i++</code>继续比较后面的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_21-57-47.png" alt=""></p></li><li><p>若<code>e&lt;v</code>，那么将<code>e</code>移动到<code>j</code>所指向元素的后一个元素，接着<code>j++</code>，然后<code>i++</code>继续比较后面的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_22-09-45.png" alt=""></p></li><li><p>使用这种方式对整个数组进行一次遍历，遍历完后数组被分成三部分，左边部分是<code>v</code>，中间部分是<code>&gt;v</code>，右边部分是<code>&lt;v</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_22-15-03.png" alt=""></p></li><li><p>最后，我们让<code>l</code>指向的元素和<code>j</code>指向的元素交换，这样就<code>v</code>这个元素进行了快速排序，<code>v</code>左边元素都小于<code>v</code>，右边元素都大于<code>v</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-10_22-26-25.png" alt=""></p></li></ol><p>现在我们使用上述方法对数组<code>[2, 1, 4, 3, 7, 8, 5, 6]</code>进行快速排序，下图展示了整个快速排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-11_13-44-45.jpg" alt=""></p><p>快速排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归使用快速排序,对arr[l...r]的范围进行排序</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对arr[l...r]部分进行partition操作, 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] > arr[p]</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 最左元素作为标定点</span>    Comparable v <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化的快速排序"><a href="#优化的快速排序" class="headerlink" title="优化的快速排序"></a>优化的快速排序</h2><p>经过上述介绍，我们可以发现快速排序不能保证每次切分的子数组大小相等，因此就可能一边很小，一边很大。对于一个有序数组，快速排序的时间复杂度就变成了<code>O(n^2)</code>，相当于树退化成了链表，下图展示了这种变化：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_13-58-24.png" alt=""></p><p>上述我们是固定使用左边的第一个元素作为标定元素，现在我们随机挑选一个元素作为标定元素。此时我们第一次选中第一个元素的概率为 1/n，第二次又选中第二个元素 1/n-1，以此类推，发生之前退化成链表的概率为1/n(n-1)(n-2)….，当 n 很大时，这种概率几乎为 0。</p><p>另一个优化就是<strong>对小规模数组使用插入排序</strong>，因为递归会使得小规模问题中方法的调用过于频繁，而插入排序对小规模数组排序是非常快的。</p><p>优化的快速排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归使用快速排序,对arr[l...r]的范围进行排序</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于小规模数组, 使用插入排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对arr[l...r]部分进行partition操作, 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] > arr[p]</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    Comparable v <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双路快速排序"><a href="#双路快速排序" class="headerlink" title="双路快速排序"></a>双路快速排序</h2><p>对于含有大量重复元素的数组，使用上述的快速排序效率是非常低的，因为在我们上面的判断中，如果元素小于<code>v</code>，则将元素放在<code>&lt;v</code>部分，如果元素大于等于<code>v</code>，则放在<code>&gt;v</code>部分。此时，如果数组中有大量重复元素，<code>&gt;v</code>部分会变得很长，导致左右两边不均衡，性能降低。</p><p>双路快速排序的步骤如下：</p><ol><li><p>将<code>&lt;v</code>和<code>&gt;v</code>两部分放在数组的两端，用<code>i</code>指向<code>&lt;v</code>部分的下一个元素，用<code>j</code>指向<code>&gt;v</code>部分的前一个元素。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_15-04-15.png" alt=""></p></li><li><p>从<code>i</code>开始向后遍历，如果遍历的元素<code>e&lt;v</code>，则继续向后遍历，直到遍历的元素<code>e&gt;=v</code>，则停止遍历。同样从<code>j</code>开始向前遍历，如果遍历的元素<code>e&gt;v</code>，则继续向前遍历，直到遍历的元素<code>e&lt;=v</code>，则停止遍历。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_15-12-36.png" alt=""></p></li><li><p>交换<code>i</code>指向的元素和<code>j</code>指向的元素。然后<code>i++</code>，<code>j--</code>继续比较下一个。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_15-17-57.png" alt=""></p></li></ol><p>双路快速排序的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于小规模数组, 使用插入排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    Comparable v <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意这里的边界, arr[i].compareTo(v) &lt; 0, 不能是arr[i].compareTo(v) &lt;= 0</span>        <span class="token comment" spellcheck="true">// 不加等号如果遇到相等的情况，这时候while循环就会退出，即交换i和j的值，使得对于包含大量相同元素的数组， 双方相等的数据就会交换，这样就可以一定程度保证两路的数据量平衡</span>        <span class="token comment" spellcheck="true">// 从i开始向后遍历，如果遍历的元素e&lt;v，则继续向后遍历，直到遍历的元素e>=v，则停止遍历</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从j开始向前遍历，如果遍历的元素e>v，则继续向前遍历，直到遍历的元素e&lt;=v，则停止遍历</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 此时j指向的元素是数组中最后一个小于v的元素, i指向的元素是数组中第一个大于v的元素</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三路快速排序"><a href="#三路快速排序" class="headerlink" title="三路快速排序"></a>三路快速排序</h2><p>三路快速排序的步骤如下：</p><ol><li><p>在双路快速排序的基础上，我们把等于<code>v</code>的元素单独作为一个部分。<code>lt</code>指向小于<code>v</code>部分的最后一个元素，<code>gt</code>指向大于<code>v</code>部分的第一个元素。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_16-11-34.png" alt=""></p></li><li><p>从<code>i</code>开始向后遍历，如果遍历的元素<code>e=v</code>，则<code>e</code>直接合并到<code>=v</code>部分，然后<code>i++</code>继续遍历。如果遍历的元素<code>e&lt;v</code>，则将<code>e</code>和<code>=v</code>部分的第一个元素（<code>lt+1</code>指向的元素）交换，然后<code>lt++</code>，<code>i++</code>继续遍历。如果遍历的元素<code>e&gt;v</code>，则将<code>e</code>和<code>&gt;v</code>部分前一个元素（<code>gt-1</code>指向的元素）交换，然后<code>gt--</code>，不过此时<code>i</code>不需要改变，因为<code>i</code>位置的元素是和<code>gt</code>位置前面的空白元素交换过来的。</p></li><li><p>遍历完后<code>i=gt</code>，然后将<code>l</code>指向元素和<code>lt</code>指向元素交换。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-11_16-30-43.png" alt=""></p></li><li><p>对<code>&lt;v</code>部分和<code>&gt;v</code>部分进行以上操作。</p></li></ol><p>三路快速排序相比双路快速排序的优势在于：减少了对重复元素的比较操作，因为重复元素在一次排序中就已经作为单独一部分排好了，之后只需要对不等于该重复元素的其他元素进行排序。</p><p>三路快速排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于小规模数组, 使用插入排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InsertionSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    Comparable v <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lt <span class="token operator">=</span> l<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// arr[l+1...lt] &lt; v</span>    <span class="token keyword">int</span> gt <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arr[gt...r] > v</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// arr[lt+1...i) == v</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> gt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            lt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> gt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// arr[i] == v</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> lt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> gt<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了快速排序、快速排序的优化、双路快速排序和三路快速排序。</p><p>对于快速排序，我们需要选择合适的标定点，使得标定点的两边平衡；在快速排序中递归到小数组时，我们可以使用插入排序替换递归，减少不必要的开销。</p><p>对于双路快速排序和三路快速排序，我们使用的场合是数组中存在大量重复元素。</p><p>最后，提示一下 JDK 底层的排序使用的就是<strong>插入排序 + 双路快速排序 + 归并排序的组合</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解冒泡排序</title>
      <link href="/posts/60912.html"/>
      <url>/posts/60912.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次我们介绍交换类排序中的冒泡排序，和简单插入排序相似，冒泡排序虽然时间复杂度也是<code>O(n^2)</code>，但是对于有序数组的排序，时间复杂度也可以降为<code>O(n)</code>，效率是比较高的。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>对数组<code>[1, 4, 3, 2, 5, 6, 7, 8]</code>从小到大排序，使用冒泡排序步骤如下：</p><ol><li>依次比较相邻元素的大小。</li><li>如果前面的数据大于后面的数据，就交换这两个数据，然后向右移动一步，接着比较。经过第一轮的多次比较交换后，最大的数据就移动到了最后。</li><li>以此类推，经过 n 轮循环，数组就排序好了。</li></ol><p>下图展示了冒泡排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-10_16-55-06.jpg" alt=""></p><p>冒泡排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h2><p>如果对于一个有序的数组，使用上述冒泡排序的话，同样会执行<code>n(n-1)/2</code>次。实际上，在内循环中每一次比较只要没有发生逆序，即元素之间进行交换，那么就说明数组已经有序，这时已经可以退出程序了。</p><p>优化思路就是设置一个交换标志<code>swapped</code>，只要发生了交换，就让<code>swapped = true</code>，外部循环判断<code>swapped</code>是否为<code>true</code>，不是就结束程序，说明排序完成。</p><p>下面展示了优化思路的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-10_16-51-01.jpg" alt=""></p><p>优化代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每一次for循环将最大的元素放在了最后的位置</span>        <span class="token comment" spellcheck="true">// 所以下一次排序, 最后的元素可以不再考虑，n--</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>swapped<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h2><p>在上述优化的基础上，我们还可以进一步优化。</p><p>对于数组：<code>[1, 4, 3, 2, 5, 6, 7, 8]</code>，按照上面的优化思路，我们在第一轮比较时，需要让<code>5, 6, 7, 8</code>比较，第二轮比较时，需要让<code>5, 6, 7</code>比较，然而它们都是有序的排列，因此，我们是否能减少这些不必要的比较呢？答案是可以的。</p><p>优化思路就是每一轮循环完后，更新<code>n</code>的值，更新为<strong>最后一次交换的位置</strong>，这样，在此之后的元素都已经是有序的了，那么下次循环中就不用再比较了。</p><p>下图展示了优化思路的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-10_18-01-10.jpg" alt=""></p><p>优化代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newn<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        newn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 记录最后一次的交换位置，在此之后的元素都是已经有序的，因此下一轮扫描中不再考虑</span>                newn <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> newn<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>newn <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解直接插入排序和希尔排序</title>
      <link href="/posts/30098.html"/>
      <url>/posts/30098.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前我们曾经介绍了选择类排序中的<strong>简单选择排序</strong>，它的时间复杂度是<code>O(n^2)</code>。这次我们介绍插入类排序中的<strong>直接插入排序</strong>和<strong>希尔排序</strong>。</p><p>对于直接插入排序，虽然它的时间复杂度也是<code>O(n^2)</code>，但是在元素<strong>有序或近乎有序</strong>的情况下，时间复杂度可以降为<code>O(n)</code>，效率比<code>O(nlogn)</code>的算法还要高。</p><p>然而对于大规模的乱序数组，使用直接插入排序的效率是非常低的。此时我们需要使用希尔排序，希尔排序在直接插入排序的基础上，弥补了直接插入排序只能比较相邻元素的不足，使得可以按照指定步长比较元素，充分发挥了直接插入排序对于小规模有序数组排序的优势。</p><p>下面我们分别介绍<strong>直接插入排序</strong>和<strong>希尔排序</strong>两类插入排序。</p><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>有如下数组，我们需要对它从小到大排序，利用直接插入排序步骤如下：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-07_15-08-15.png" alt=""></p><ol><li>将第二个元素和第一个元素比较，小于第一个元素的话交换位置，这样第二个元素作为最小的元素排在了最前面，大于的话不交换。</li><li>然后将第三个元素和第二个元素比较，小于第二个元素的话交换位置，然后再和第一个元素比较，小于第一个元素的话再次交换位置，这样第三个元素作为最小的元素排在了最前面，大于的话不交换。</li><li>以此类推，直到最后一个元素插入到合适位置。</li></ol><p>下图展示了整个排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-09_14-59-49.png" alt=""></p><p>直接插入排序的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0位置不需要比，从1到最后一个位置n-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>优化的思路就是将内循环中每次<code>swap</code>交换操作修改为<strong>让较大的元素后移，最后再进行一次交换</strong>，这样一来访问数组的次数就减少了（交换需要三行，赋值只需要一行）。</p><p>优化步骤如下：</p><ol><li>每次先保存当前插入的元素。</li><li>将当前保存的元素（第二个元素）和第一个元素比较，小于第一个元素的话，将第一个元素移动到第二个元素位置，然后当前保存的元素移动到第一个元素位置，这样第二个元素作为最小的元素排在了最前面。</li><li>将当前保存的元素（第三个元素）和第二个元素比较，小于第二个元素的话，将第二个元素移动到第三个元素位置，然后当前保存的元素移动到第二个元素位置，接着小于第一个元素的话再次执行以上操作，这样第三个元素作为最小的元素排在了最前面。</li><li>以此类推，直到最后一个元素插入到合适位置。</li></ol><p>下图展示了优化思路的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-09_15-58-10.png" alt=""></p><p>优化的直接插入排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0位置不需要比，从1到最后一个位置n-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存当前插入的元素</span>        Comparable e <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>上面我们介绍了直接插入排序，它对于大规模乱序数组的排序效率比较低，因为只能交换相邻的元素，所以元素只能一点一点地从数组的一端移动到另一端。此外，如果最小的元素在数组的末尾，那么将它插入到正确位置需要移动 N-1 次。</p><p>希尔排序的出现，解决了上述问题。它能够交换不相邻的元素以对数组的局部进行排序，并最终用直接插入排序将局部有序的数组排序。 </p><p>希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组也叫作 <strong>h 有序数组</strong>。我们不研究 h 是如何得来的，这里直接使用了《算法》书中的 h 步长序列。</p><blockquote><p><strong>h = 3*h+1</strong>，根据 h 的取值分别为1、4、13 …</p></blockquote><p>实际上只需要把直接插入排序代码中移动元素的距离由 <strong>1</strong> 改为 <strong>h</strong> 即可。这样，希尔排序就转换为了一个类似于直接插入排序但使用不同增量的过程。</p><p>下图展示了希尔排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-09_20-49-21.png" alt=""></p><p>如果你仔细观察，会发现在 h=1 时，相比直接插入排序，比较的次数大大减少了，这是因为希尔排序使得部分子数组有序，而直接插入排序对于近乎有序的数组，效率是非常高的。</p><p>希尔排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 步长序列: 1, 4, 13...</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将 arr[i] 插入到 arr[i-h], arr[i-2*h], arr[i-3*h]... 中</span>            Comparable e <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 优化的插入排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> h <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 直接插入排序 </tag>
            
            <tag> 希尔排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解堆结构、堆排序及堆的应用</title>
      <link href="/posts/16200.html"/>
      <url>/posts/16200.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一次我们介绍了选择类排序中的简单选择排序，简单归简单，但是时间复杂度是<code>O(n^2)</code>，这次我们介绍另一种时间复杂度为<code>O(nlogn)</code>的选择类排序方法叫做堆排序。</p><p>我将从以下几个方面介绍：</p><ul><li>堆的结构</li><li>堆排序</li><li>优化的堆排序</li><li>原地堆排序</li><li>堆的应用</li></ul><h2 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h2><p>什么是堆？我给出了百度的定义，如下：</p><blockquote><p>堆(Heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵<strong>完全二叉树</strong>的数组对象。</p></blockquote><p>堆总是满足下列性质：</p><ul><li>堆中某个节点的值总是不大于或不小于其父节点的值。</li><li>堆总是一棵完全二叉树。</li></ul><p>将根节点最大的堆叫做最大堆，根节点最小的堆叫做最小堆。</p><p>下图展示了一个最大堆的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/HeapSort-1.png" alt=""></p><p>可见，堆中某个节点的值总是小于等于其父节点的值。</p><p>由于堆是一棵完全二叉树，因此我们可以对每一层进行编号，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/HeapSort-2.png" alt=""></p><p>我们完全可以使用数组存放这些元素，那如何确定存放的位置呢？利用如下公式：</p><blockquote><p><strong>父节点：parent(i) = (i-1)/2</strong></p><p><strong>左孩子：leftChild(i) = 2*i+1</strong></p><p><strong>右孩子：rightChild(i) = 2*i+2</strong></p></blockquote><p>相关代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">rightChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>向堆中添加元素的步骤如下：</p><ol><li>将新元素放到数组的末尾。</li><li>获取新元素的父亲节点在数组中的位置，比较新元素和父亲节点的值，如果父亲节点的值小于新元素的值，那么两者交换。以此类推，不断向上比较，直到根节点结束。</li></ol><p>下图展示了添加元素的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%A0%86%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0SiftUp.png" alt=""></p><p>添加元素的过程也叫做<code>siftUp</code>，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Array是自己实现的动态数组</span><span class="token keyword">private</span> Array<span class="token operator">&lt;</span>E<span class="token operator">></span> data<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">siftUp</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> <span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>删除元素其实就是删除堆顶的元素，步骤如下：</p><ol><li>让数组最后一个元素和数组第一个元素（堆顶元素）交换。</li><li>交换完后，删除数组最后的元素。</li><li>让堆顶元素和左右孩子节点比较，如果堆顶元素比左右孩子节点中最大的元素还要大，那么满足堆的性质，直接退出。否则如果堆顶元素比左右孩子节点中最大的元素小，那么堆顶元素就和最大的元素交换，然后继续重复执行以上操作，只不过这时候把堆顶元素称为父节点更好。</li></ol><p>下图展示了删除元素的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%A0%86%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0SiftDown.png" alt=""></p><p>删除元素的过程也叫做<code>siftDown</code>，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里我们不命名为remove，命名为extractMax，抽取堆顶最大元素</span><span class="token keyword">public</span> E <span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    E ret <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 让最后一个叶子节点补到根节点，然后让它下沉</span>    <span class="token comment" spellcheck="true">// (为什么是取最后一个叶子节点，因为即使取走最后一个叶子节点，依旧能保持是一棵完全二叉树)</span>    data<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">leftChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// data[j]是leftChild和rightChild中的最大值</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果父节点比左右孩子中的最大值还要大，那么说明没有问题，直接退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则交换</span>        data<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/FeiChaoyu/DSA/blob/master/src/数据结构/堆/MaxHeap.java" target="_blank" rel="noopener">最大堆的完整代码</a></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>通过上面的介绍，我们应该明白了堆的结构，堆的添加和删除元素操作是如何完成的。那么对于堆排序来说，就是小菜一碟了，因为堆排序就是用到了堆的添加和删除操作，步骤如下：</p><ol><li>将数组中元素一个个添加到堆（最大堆）中。</li><li>添加完成后，每次取出一个元素倒序放入到数组中。</li></ol><p>堆排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// MaxHeap是自己实现的最大堆</span>    MaxHeap<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxHeap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/FeiChaoyu/DSA/blob/master/src/算法/排序算法/选择类排序/堆排序/HeapSort.java" target="_blank" rel="noopener">堆排序完整代码</a></p><h2 id="优化的堆排序"><a href="#优化的堆排序" class="headerlink" title="优化的堆排序"></a>优化的堆排序</h2><p>在上述的堆排序中，我们在将数组中元素添加到堆时，都是一个个添加，是否有优化的方法呢？答案是有的，我们可以将数组直接转换成堆，这种操作叫做<code>Heapify</code>。</p><p><code>Heapify</code>就是从最后一个节点开始，判断父节点是否比孩子节点大，不是就<code>siftDown</code>。<code>Heapify</code>操作的时间复杂度是<code>O(n)</code>，相比一个个添加的时间复杂度是<code>O(nlogn)</code>，可见性能提升了不少。</p><p>假设我们有数组：<code>[15, 18, 12, 16, 22, 28, 16, 45, 30, 52]</code>，下图展示了对其进行<code>Heapify</code>的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn@master/img/%E4%BC%98%E5%8C%96%E5%A0%86%E6%8E%92%E5%BA%8Fheapify.png" alt=""></p><p>优化的堆排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// MaxHeap是自己实现的最大堆，当传入数组作为构造参数时，会对其进行heapify</span>    MaxHeap<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxHeap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构造方法</span><span class="token keyword">public</span> <span class="token function">MaxHeap</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数组堆化的过程就是从最后一个节点开始，判断父节点是否比子节点大，不是就siftDown</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parent</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/FeiChaoyu/DSA/blob/master/src/算法/排序算法/选择类排序/堆排序/HeapSort2.java" target="_blank" rel="noopener">优化的堆排序完整代码</a></p><h2 id="原地堆排序"><a href="#原地堆排序" class="headerlink" title="原地堆排序"></a>原地堆排序</h2><p>原地堆排序可以让我们的空间复杂度变为<code>O(1)</code>，因为不占用新的数组。</p><p>原地堆排序类似于堆的删除元素，步骤如下：</p><ol><li>对数组<code>Heapify</code>。</li><li>我们让数组最后一个元素和第一个元素交换，这时数组最后一个元素就是最大的。</li><li>然后让数组第一个元素<code>siftDown</code>，这样除去最后一个元素，前面又是一个最大堆。</li><li>我们让数组倒数第二个元素和第一个元素交换，这时数组倒数第二个元素就是次最大的。</li><li>然后让数组第一个元素<code>siftDown</code>，这样除去最后一个元素和倒数第二个元素，前面又是一个最大堆。</li><li>以此类推，像这样倒着排，即可完成从小到大的排序。</li></ol><p>下图展示了原地堆排序的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%8E%9F%E5%9C%B0%E5%A0%86%E6%8E%92%E5%BA%8F.png" alt=""></p><p>原地堆排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// heapify</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parent</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心代码</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">leftChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果父节点比左右孩子中的最大值还要大，那么说明没有问题，直接退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/FeiChaoyu/DSA/blob/master/src/算法/排序算法/选择类排序/堆排序/HeapSort3.java" target="_blank" rel="noopener">原地堆排序完整代码</a></p><h2 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h2><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p>一旦我们掌握了堆这个数据结构，那么优先级队列的实现就很简单了，只需要弄清楚优先级队列需要有哪些接口就行。JDK 中自带的<code>PriorityQueue</code>就是用堆实现的优先级队列，不过需要注意<code>PriorityQueue</code>内部使用的是最小堆。</p><p><a href="https://github.com/FeiChaoyu/DSA/blob/master/src/数据结构/队列/PriorityQueue.java" target="_blank" rel="noopener">优先级队列完整代码</a></p><h3 id="Top-K-问题"><a href="#Top-K-问题" class="headerlink" title="Top K 问题"></a>Top K 问题</h3><p>Top K 问题就是求解<strong>前 K 个</strong>最大的元素或者最小的元素。元素个数不确定，数据量可能很大，甚至源源不断到来，但需要知道目前为止前 K 个最大或最小的元素。当然问题还可能变为求解<strong>第 K 个</strong>最大的元素或最小的元素。</p><p>通常我们有如下解决方案：</p><ol><li>使用JDK中自带的排序，如<code>Arrays.sort()</code>，由于底层使用的快速排序，所以时间复杂度为<code>O(nlogn)</code>。但是如果 K 取值很小，比如是 1，即取最大值，那么对所有元素排序就没有必要了。</li><li>使用简单选择排序，选择 K 次，那么时间复杂度为<code>O(n*K)</code>，如果 K 大于 logn，那还不如快排呢！</li></ol><p>上述两种思路都是假定所有元素已知，如果元素个数不确定，且数据源源不断到来的话，就无能为力了。</p><p>下面提供一种新的思路：</p><p>我们维护一个长度为 K 的数组，最前面 K 个元素就是目前最大的 K 个元素，以后每来一个新元素，都先找数组中的最小值，将新元素与最小值相比，如果小于最小值，则什么都不变，如果大于最小值，则将最小值替换为新元素。这样一来，数组中维护的永远是最大的 K 个元素，不管数据源有多少，需要的内存开销都是固定的，就是长度为 K 的数组。不过，每来一个元素，都需要找到最小值，进行 K 次比较，是否有办法能减少比较次数呢？</p><p>当然，这时候堆就要登场了，我们使用最小堆维护这 K 个元素，每次来新的元素，只需要和根节点比较，小于等于根节点，不需要变化，否则用新元素替换根节点，然后<code>siftDown</code>调整堆即可。此时的时间复杂度为<code>O(nlogK)</code>，相比上述两种方法，效率大大提升，且空间复杂度也大大降低。</p><p>Top K 问题代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopK</span><span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>E<span class="token operator">></span> p<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TopK</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 未满k个时，直接添加</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E head <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 小于等于TopK中的最小值，不用变</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则，新元素替换原来的最小值</span>        p<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取当前的最大的K个元素     *     * @param a   返回类型的空数组     * @param &lt;T>     * @return TopK以数组形式     */</span>    <span class="token keyword">public</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取第K个最大的元素     *     * @return 第K个最大的元素     */</span>    <span class="token keyword">public</span> E <span class="token function">getKth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TopK<span class="token operator">&lt;</span>Integer<span class="token operator">></span> top5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopK</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        top5<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"top5："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>top5<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5th："</span> <span class="token operator">+</span> top5<span class="token punctuation">.</span><span class="token function">getKth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们直接利用 JDK 自带的由最小堆实现的优先级队列<code>PriorityQueue</code>。</p><p>依此思路，可以实现求前 K 个最小元素，只需要在实例化<code>PriorityQueue</code>时传入一个反向比较器参数，然后更改<code>add</code>方法的逻辑。</p><h3 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h3><p>堆也可以用于求解中位数，数据量可能很大且源源不断到来。</p><blockquote><p>注意：如果元素个数是偶数，那么我们假定中位数取任意一个都可以。</p></blockquote><p>有了上面的例子，这里就很好理解了。我们使用两个堆，一个最大堆，一个最小堆，步骤如下：</p><ol><li>添加的第一个元素作为中位数 m，最大堆维护 &lt;= m 的元素，最小堆维护 &gt;= m 的元素，两个堆都不包含 m。</li><li>当添加第二个元素 e 时，将 e 与 m 比较，若 e &lt;= m，则将其加入到最大堆中，否则加入到最小堆中。</li><li>如果出现最小堆和最大堆的元素个数相差 &gt;= 2，则将 m 加入元素个数少的堆中，然后让元素个数多的堆将根节点移除并赋值给 m。</li><li>以此类推不断更新。</li></ol><p>假设有数组<code>[20, 30, 40, 50, 2, 4, 3, 5, 7, 8, 10]</code>。</p><p>下图展示了整个操作的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/2020-02-09_13-26-49.png" alt=""></p><p>求解中位数的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Median</span><span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 最小堆     */</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>E<span class="token operator">></span> minP<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最大堆     */</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>E<span class="token operator">></span> maxP<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前中位数     */</span>    <span class="token keyword">private</span> E m<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Median</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> E m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 小于等于中值，加入最大堆</span>            maxP<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 大于中值，加入最大堆</span>            minP<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minP<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> maxP<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最小堆元素个数多，即大于中值的数多</span>            <span class="token comment" spellcheck="true">// 将 m 加入到最大堆中，然后将最小堆中的根移除赋给 m</span>            maxP<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> minP<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>maxP<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> minP<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minP<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> maxP<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Median<span class="token operator">&lt;</span>Integer<span class="token operator">></span> median <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Median</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        median<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>median<span class="token punctuation">.</span><span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 二叉堆 </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解简单选择排序</title>
      <link href="/posts/34184.html"/>
      <url>/posts/34184.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><p>有如下数组，我们需要对它从小到大排序，步骤如下：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-02-07_15-08-15.png" alt=""></p><ol><li>在数组中找到最小值，然后与第一个位置交换。</li><li>除去第一个位置在数组中继续找最小值，与第二个位置交换，以此类推，直到末尾。</li></ol><p>下图展示了整个交换的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/SelectionSort.png" alt=""></p><p>选择排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 寻找[i, n)区间里的最小值的索引</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每一轮循环找到最小的元素交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>我们通过类似对撞指针的思路，维护两个指针，这两个指针分别指向最大值和最小值。</p><p>步骤如下：</p><ol><li>我们让<code>left</code>指针指向数组的起始位置（最小值），<code>right</code>指针指向数组的末尾位置（最大值）。</li><li>在<code>left &lt; right</code>的前提下，保证<code>left指向的元素 &lt; right指向的元素</code>，不满足则交换。</li><li>在每一轮循环<code>(left+1, right)</code>中，遍历所有元素，如果有元素小于最小值，则更新最小值的位置；否则如果有元素大于最大值，则更新最大值的位置。</li><li>一轮循环结束，让最小值和<code>left</code>指向的元素交换，让最大值和<code>right</code>指向的元素交换。</li><li>让<code>left</code>指针和<code>right</code>指针所构成的区间减小，即<code>left++, right--</code>。</li></ol><p>下图展示了整个交换的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/SelectionSort-2.png" alt=""></p><p>优化的选择排序代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在每一轮中, 可以同时找到当前未处理元素的最大值和最小值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在每一轮查找时, 要保证arr[minIndex] &lt;= arr[maxIndex]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> minIndex<span class="token punctuation">,</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> right<span class="token punctuation">,</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 简单选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员问答汇总</title>
      <link href="/posts/25343.html"/>
      <url>/posts/25343.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="switch-语句可以用于哪些数据类型"><a href="#switch-语句可以用于哪些数据类型" class="headerlink" title="switch 语句可以用于哪些数据类型"></a>switch 语句可以用于哪些数据类型</h3><blockquote><p>switch 语句可以用于 char, byte, short, int 这些数据基本类型，以及它们的包装类。</p><p>在 switch 里不能用 long, double, float, boolean 包括它们的包装类。</p><p>jdk1.7以上可以用字符串类型。</p><p>switch 中可以用枚举类型。</p></blockquote><h3 id="String-知识点总结"><a href="#String-知识点总结" class="headerlink" title="String 知识点总结"></a>String 知识点总结</h3><p><strong>什么是 String，它是什么数据类型，能否被继承</strong></p><blockquote><p>String 是定义在 java.lang 包下的一个类。它不是基本数据类型。</p><p>String 是不可变的，JVM 使用字符串池来存储所有的字符串对象。</p><p>String 不能被继承，因为被 final 修饰的类不能被继承。</p></blockquote><p><strong>创建 String 对象的不同方式有哪些</strong></p><blockquote><ul><li>使用 new 关键字创建</li></ul><p>使用这种方式时，JVM 创建字符串对象但不存储于字符串池。可以通过调用<code>intern()</code>方法将该字符串对象存储在字符串池，如果字符串池已经有了同样值的字符串，则返回引用。</p><ul><li>使用双引号创建</li></ul><p>使用这种方式时，JVM 去字符串池找有没有值相等字符串，如果有，则返回找到的字符串引用。否则创建一个新的字符串对象并存储在字符串池。</p><p>例如：</p><pre class="line-numbers language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>String，StringBuffer，StringBuilder 的区别</strong></p><blockquote><p>String 是不可变类，每当我们对 String 进行操作的时候，总是会创建新的字符串。操作 String 很耗资源，所以 Java 提供了两个工具类来操作StringBuffer 和 StringBuilder。</p><p>StringBuffer 和 StringBuilder 是可变类，StringBuffer 是线程安全的，StringBuilder 则不是线程安全的。所以在多线程对同一个字符串操作的时候，我们应该选择用 StringBuffer。在单线程的情况下，StringBuilder 的效率比 StringBuffer 高。</p></blockquote><p><strong>String 不可变的优点</strong></p><blockquote><ul><li><strong>便于实现 String 常量池</strong></li></ul><p>只有当字符串是不可变的，字符串池才有可能实现。字符串池的实现可以在运行时<strong>节约堆空间</strong>，因为不同的字符串变量都指向池中的同一个字符串。但如果字符串是可变的，那么String interning将不能实现(String interning是指对不同的字符串仅仅只保存一个，即不会保存多个相同的字符串，叫<strong>字符串驻留</strong>)。</p><ul><li><strong>使多线程安全</strong></li></ul><p>因为字符串是不可变的，所以是多线程安全的，同一个字符串实例可以被多个线程共享。这样便不用因为线程安全问题而使用同步。字符串自己便是线程安全的。</p><ul><li><strong>避免网络安全问题</strong></li></ul><p>如果字符串是可变的，那么会引起很严重的安全问题。譬如，数据库的用户名、密码都是以字符串的形式传入来获得数据库的连接，或者在 socket 编程中，主机名和端口都是以字符串的形式传入。因为字符串是不可变的，所以它的值是不可改变的，否则黑客们可以钻到空子，改变字符串指向的对象的值，造成安全漏洞。</p><ul><li><strong>加快字符串处理速度</strong></li></ul><p>因为字符串是不可变的，所以在它创建的时候 hashCode 就被缓存了，不需要重新计算。这就使得<strong>字符串很适合作为 Map 中的键</strong>，字符串的处理速度要快过其它的键对象。这就是 <strong>HashMap 中的键往往都使用字符串</strong>。</p></blockquote><p><strong>为什么我们在使用 HashMap 的时候总是用 String 做key</strong></p><blockquote><p>我们来看下String#hashCode的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>　　<span class="token comment" spellcheck="true">// 默认值是0</span>　　<span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>　　<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将成员变量hash缓存到局部变量</span>  <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>　　　　 <span class="token comment" spellcheck="true">// 这里使用的是局部变量，没有多线程修改的风险</span>　　　　 <span class="token comment" spellcheck="true">// 如果之前没有缓存过，那么h为0，计算hash值并进行缓存</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      hash <span class="token operator">=</span> h<span class="token punctuation">;</span>  <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 如果之前缓存过，直接返回hash值</span>  <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，因为字符串是不可变的，当创建字符串时，它的 <strong>hashCode 被缓存</strong>下来，不需要再次计算。因为 HashMap 内部实现是通过 key 的 hashCode 来确定 value 的存储位置，所以相比于其他对象更快。</p></blockquote><h3 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h3><blockquote><p><strong>抽象类的特点</strong>：</p><ul><li>抽象方法只作声明，而不包含实现，可以看成是没有实现体的虚方法</li><li>抽象类不能被实例化</li><li>抽象类可以但不是必须有抽象属性和抽象方法，但是一旦有了抽象方法，就一定要把这个类声明为抽象类</li><li>具体派生类必须覆盖基类的抽象方法</li><li>抽象派生类可以覆盖基类的抽象方法，也可以不覆盖。如果不覆盖，则其具体派生类必须覆盖它们</li><li>抽象方法不能用 private, static 修饰</li></ul><p><strong>接口的特点</strong>：</p><ul><li><p>接口不能被实例化</p></li><li><p>接口只能包含方法声明</p></li><li><p>接口中成员变量默认修饰符是 public static final，方法的默认修饰符是 public abstract</p></li><li><p>接口中可以包含的内容：</p></li></ul><p>Java7：常量、抽象方法</p><p>Java8：新增默认方法、静态方法</p><p>Java9：新增私有方法</p><p><strong>接口和抽象类的区别</strong>：</p><ul><li>抽象类可以有构造方法，接口中不能有构造方法</li><li>抽象类中可以有普通成员变量，接口中没有普通成员变量</li><li>抽象类中可以包含静态方法，接口中不能包含静态方法（jdk8之前）</li><li>抽象类是对类的抽象，对逻辑的归纳，比如人类是中国人和美国人的抽象。接口是对功能或行为的抽象</li></ul></blockquote><h3 id="this-和-super"><a href="#this-和-super" class="headerlink" title="this 和 super"></a>this 和 super</h3><blockquote><p>this 关键字的三种用法：</p><ul><li>在本类的成员方法中，访问本类的成员变量</li><li>在本类的成员方法中，访问本类的另一个成员方法</li><li>在本类的构造方法中，访问本类的另一个构造方法</li></ul><p>super 关键字的三种用法：</p><ul><li>在子类的成员方法中，访问父类的成员变量</li><li>在子类的成员方法中，访问父类的成员方法</li><li>在子类的构造方法中，访问父类的构造方法</li></ul></blockquote><h3 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h3><blockquote><p><strong>语法定义角度</strong>：</p><p>静态变量前要加 static 关键字，而实例变量前则不加</p><p><strong>程序运行角度</strong>：</p><p>静态变量则可以直接使用类名来引用。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。且一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝。</p><p>实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。</p></blockquote><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><blockquote><p><strong>值传递</strong>：在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。<br><strong>引用传递</strong>：“引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向同一块内存地址，对形参的操作会影响的真实内容。</p><p><strong>Java中只有值传递</strong></p></blockquote><h3 id="方法参数需要被内部类使用时，这个参数必须被-final-修饰的原因"><a href="#方法参数需要被内部类使用时，这个参数必须被-final-修饰的原因" class="headerlink" title="方法参数需要被内部类使用时，这个参数必须被 final 修饰的原因"></a>方法参数需要被内部类使用时，这个参数必须被 final 修饰的原因</h3><blockquote><p>外部类和内部类是平行的，内部类不从属于外部类，因此外部类有可能在内部类之前被回收。如果不加 final，一旦外部类在内部类之前被回收，那么外部类中所包含的对象也会被回收，这时内部类还未使用该对象，一旦使用就会报 NPE。</p><p>如果在此参数前加上 final，那么这个参数就是常量了，存储位置就由堆区转移到常量池中，从而不会被Minor GC。</p></blockquote><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="分代管理和垃圾回收流程"><a href="#分代管理和垃圾回收流程" class="headerlink" title="分代管理和垃圾回收流程"></a>分代管理和垃圾回收流程</h3><blockquote><p>虚拟机的堆内存可以划分为3个区域：年轻代、年老代、永久代。</p><p>在年轻代中，一般划分为 Eden 区和两个 Survivor 区。</p><p><strong>垃圾回收的一般流程：</strong></p><ol><li>new 出来的对象一般先到 Eden 区中申请空间，如果 Eden 区满了，那么会把 Eden 区中还存活的对象复制到其中一个 Survivor 区中。这里包含一次隐含回收，即当我们把 Eden 区存活的对象复制到 Survivor 区时，就已经把无用的对象回收了。</li><li>当 Eden 区和其中一个 Survivor 区都满了时，会把 Eden 区和其中一个 Survivor 区的存活对象再复制到另外一个 Survivor 区中，这里也包含一次隐含回收。</li><li>如果年轻代的空间都满了（Eden 和两个 Survivor 都满了），那么虚拟机会把年轻代中还存活的对象复制到年老代中。</li><li>当年老代也满了，会启动 Full GC，对年轻代、年老代、持久代进行全面回收，这时需要耗费比较长的时间。</li></ol><p><strong>两类回收机制：</strong></p><ul><li><strong>轻量级回收 Minor GC</strong></li></ul><p>在年轻代中的回收流程都属于这种。</p><ul><li><strong>重量级回收 Full GC</strong></li></ul><p>以下4种情况会触发 Full GC：</p><ol><li>年老代满了</li><li>持久代满了</li><li>显式调用 <code>System.gc()</code>（调用这个方法后，虚拟机并不会直接启动垃圾回收，而是找个合适的时间点启动垃圾回收）</li><li>修改堆内存的策略，当虚拟机监控到策略的变化，也会触发 Full GC</li></ol></blockquote><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><blockquote><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统自动执行析构函数。析构函数往往用来做“清理善后” 的工作（例如在建立对象时用 new 开辟了一片内存空间，垃圾回收时会自动调用析构函数后释放内存）。</p></blockquote><h3 id="如何写出高性能代码"><a href="#如何写出高性能代码" class="headerlink" title="如何写出高性能代码"></a>如何写出高性能代码</h3><blockquote><ul><li>物理对象（如 Connection 或 IO）用好之后要及时 close</li><li>大对象用完后及时设为 null</li><li>集合对象用完后及时 clear</li><li>不要频繁使用 String 对象</li><li>尽可能使用软引用和弱引用</li><li>不建议重写 finalize 方法</li><li>可以通过调整命令行参数来调整堆内存的性能</li></ul></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="流与集合的区别"><a href="#流与集合的区别" class="headerlink" title="流与集合的区别"></a>流与集合的区别</h3><blockquote><ul><li>流用于计算，集合用于存储</li><li>流表现在时间上，集合表现在空间上。比如生成所有质数，这在空间上是无穷的，无法实现，但是在时间上是可以通过流生成的</li><li>流只能遍历一次</li><li>流是内部迭代，集合是外部迭代</li></ul></blockquote><h3 id="集合中的浅拷贝和深拷贝"><a href="#集合中的浅拷贝和深拷贝" class="headerlink" title="集合中的浅拷贝和深拷贝"></a>集合中的浅拷贝和深拷贝</h3><blockquote><p>当需要对一个集合中的内容做备份，另一个集合中的内容做修改。那么这个内容对象必须实现<code>Cloneable</code>接口，调用父类的<code>clone</code>方法完成对象的深拷贝，那么之后再需要备份时，使用对象的 clone 方法获取一个新对象用于修改，这样就不会在修改的同时影响原有的对象，因为默认集合时浅拷贝。</p></blockquote><h3 id="集合中为什么需要迭代器？"><a href="#集合中为什么需要迭代器？" class="headerlink" title="集合中为什么需要迭代器？"></a>集合中为什么需要迭代器？</h3><blockquote><ol><li><p>即使不了解集合内部的数据结构，也可以进行遍历。也就是一种<strong>关注点分离</strong>的思想，<strong>将数据的实际组织方式与数据的迭代遍历相分离</strong>。</p></li><li><p>不暴露内部的数据，可以直接外部遍历。</p></li><li><p>适用性强，集合都能使用迭代器。</p></li></ol></blockquote><h3 id="HashSet-和-TreeSet-如何保证元素不重复"><a href="#HashSet-和-TreeSet-如何保证元素不重复" class="headerlink" title="HashSet 和 TreeSet 如何保证元素不重复"></a>HashSet 和 TreeSet 如何保证元素不重复</h3><blockquote><p>HashSet 基于哈希表，需要重写 hashCode 和 equals 方法。</p><p>TreeSet 基于红黑树，需要实现 Comparable 接口，重写 compareTo 方法。</p></blockquote><h3 id="HashMap-汇总"><a href="#HashMap-汇总" class="headerlink" title="HashMap 汇总"></a>HashMap 汇总</h3><h4 id="为什么使用数组-链表或红黑树？"><a href="#为什么使用数组-链表或红黑树？" class="headerlink" title="为什么使用数组+链表或红黑树？"></a>为什么使用数组+链表或红黑树？</h4><blockquote><p>数组是用来确定哈希桶的位置，利用元素的 key 的 hash 值对数组长度取模得到。链表或红黑树是用来解决 hash 冲突问题，当出现 hash 值一样的情形，就在数组上的对应位置形成一条链表或一棵树。</p><p><strong>PS：</strong>这里的 hash 值并不是指 hashcode，而是将 hashcode 高低十六位异或过的。</p></blockquote><h4 id="HashMap-的-get-过程"><a href="#HashMap-的-get-过程" class="headerlink" title="HashMap 的 get 过程"></a>HashMap 的 get 过程</h4><blockquote><p>对 key 的 hashCode 进行 hash 运算，计算在哈希数组中的下标获取 bucket 位置，如果在桶的首位上就可以找到就直接返回，否则在树中找或者链表中遍历寻找。</p></blockquote><h4 id="HashMap-的-put-过程"><a href="#HashMap-的-put-过程" class="headerlink" title="HashMap 的 put 过程"></a>HashMap 的 put 过程</h4><blockquote><p><strong>putVal添加元素的过程：</strong></p><ol><li>如果哈希数组没有初始化，那么调用resize方法初始化哈希数组</li><li>获取添加元素在哈希数组中的索引，判断该位置是否有元素，如果没有，那么直接添加即可</li><li>如果已经有元素占用，那么判断该位置存放的是链表还是红黑树。如果是链表，判断当前位置的第一个元素的 hashcode 和 key 是否和自己的相同，相同则由 onlyIfAbsent 确定是否需要覆盖（或者本身是null直接覆盖）；如果是红黑树，则直接调用 putTreeVal 方法存放。</li><li>首元素判断完后，如果不满足条件，那么开始遍历后面的节点，如果到了链表末尾还是没有找到相同的元素，那么直接在尾部添加当前元素。如果在这期间遍历的元素数量达到树化的条件，那么需要将原来的链表转换为红黑树。</li><li>如果遍历期间找到和自己 hashcode 和 key 相同的元素，那么由 onlyIfAbsent 确定是否需要覆盖（或者本身是null直接覆盖）</li><li>如果添加了新元素而不是覆盖原有值，需要 modCount 加1，表示发生了一次结构性变化。如果size大于threshold，则需要扩容resize</li></ol></blockquote><h4 id="为什么用-n-1-amp-hash-而不是-hash-n"><a href="#为什么用-n-1-amp-hash-而不是-hash-n" class="headerlink" title="为什么用 (n-1)&amp;hash 而不是 hash%n"></a>为什么用 (n-1)&amp;hash 而不是 hash%n</h4><blockquote><p>这个问题也就是<strong>为什么 HashMap 扩容需要是2的次幂</strong>。</p><p>这里的 n 代表哈希表的长度，哈希表习惯将长度设置为 2 的 n 次方，这样恰好可以保证 (n - 1) &amp; hash 的计算得到的索引值总是位于 table 数组的索引之内。例如：hash=15，n=16 时，结果为 15；hash=17，n=16 时，结果为 1。</p><p>但如果用 hash%n，那么如果hash是负数就会出现结果也是负数，并且%运算的效率低。</p></blockquote><h4 id="为什么-JDK1-8-不直接使用红黑树，而是保留了链表？"><a href="#为什么-JDK1-8-不直接使用红黑树，而是保留了链表？" class="headerlink" title="为什么 JDK1.8 不直接使用红黑树，而是保留了链表？"></a>为什么 JDK1.8 不直接使用红黑树，而是保留了链表？</h4><blockquote><p>HashMap 在 JDK1.8 及以后的版本中引入了红黑树结构，若桶中链表元素个数大于等于 <strong>8</strong> 时，<strong>链表转换成树结构</strong>；若桶中链表元素个数小于等于 <strong>6</strong> 时，<strong>树结构还原成链表</strong>。因为红黑树的平均查找长度是 <strong>log(n)</strong>，长度为 8 的时候，平均查找长度为 3，如果继续使用链表，平均查找长度为 8/2=4，这才有转换为树的必要。链表长度如果是小于等于 6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</p><p>选择 6 和 8，中间有个差值 7 可以有效防止链表和树频繁转换（类似于复杂度震荡）。假设一下，如果设计成链表个数超过 8 则链表转换成树结构，链表个数小于 8 则树结构转换成链表，如果一个 HashMap 不停的插入、删除元素，链表个数在 8 左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。</p><p>第二种回答：</p><p>因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡，而单链表不需要。 当元素小于8个的时候，此时做查询操作，链表结构已经能保证查询性能。当元素大于8个的时候，此时需要红黑树来加快查询速度，但是新增节点的效率变慢了。所有才选取 8 这个数字作为链表转为红黑树的阈值，因为发生哈希冲突的概率满足泊松分布，当发生8次哈希碰撞的概率几乎为千万分之六，即以后很少会有元素再次添加到这个桶中，这样即使红黑树的新增元素效率低，也不会有多大影响了，因为几乎没有哈希桶中元素会超过8个。</p><p>当然这都得益于哈希函数设计的好，如果自己设计的哈希函数分布不均匀，比如我们把对象的hashcode都统一返回一个常量，最终的结果就是 HashMap 会退化为一个链表，get 方法的性能降为 O(n)，使用红黑树可以将性能提升到 O(log(n))，所以应该避免这种情况的发生。</p></blockquote><h4 id="谈一下-HashMap-中-hash-函数是怎么实现的"><a href="#谈一下-HashMap-中-hash-函数是怎么实现的" class="headerlink" title="谈一下 HashMap 中 hash 函数是怎么实现的"></a>谈一下 HashMap 中 hash 函数是怎么实现的</h4><blockquote><p><strong>用高16位与低16位进行异或</strong></p><p>1、至于为什么要这样呢？</p><p>hashcode是一个32位的值，用高16位与低16位进行异或，原因在于求index是是用 （n-1） &amp; hash ，如果hashmap的capcity很小的话，那么对于两个高位不同，低位相同的hashcode，可能最终会装入同一个桶中。那么会造成hash冲突，好的散列函数，应该尽量在计算hash时，把所有的位的信息都用上，这样才能尽可能避免冲突。</p><p>2、为什么使用异或运算？</p><p>通过写出真值表可以看出：异或运算为 50％的0和 50％的1，因此对于合并均匀的概率分布非常有用。</p><p>a | b | a AND b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  0</p><p>1 | 0 |  0</p><p>1 | 1 |  1</p><p>a | b | a OR b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  1</p><p>1 | 0 |  1</p><p>1 | 1 |  1</p><p>a | b | a XOR b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  1</p><p>1 | 0 |  1</p><p>1 | 1 |  0</p></blockquote><h4 id="hash-冲突有哪些解决办法？"><a href="#hash-冲突有哪些解决办法？" class="headerlink" title="hash 冲突有哪些解决办法？"></a>hash 冲突有哪些解决办法？</h4><blockquote><p><strong>链地址法</strong></p><p><strong>开放地址法</strong></p><ul><li>线性探测。遇到哈希冲突 +1 到下一个判断</li><li>平方探测。遇到哈希冲突 +1 +4 +9 +16</li><li>二次哈希。遇到哈希冲突 + hash2(key)</li></ul><p><strong>再哈希法</strong></p><p><strong>公共溢出区域法</strong></p></blockquote><h4 id="HashMap在什么条件下扩容"><a href="#HashMap在什么条件下扩容" class="headerlink" title="HashMap在什么条件下扩容?"></a>HashMap在什么条件下扩容?</h4><blockquote><p>JDK1.7</p><p>存放新值的时候当前已有元素的个数必须大于等于阈值，且当前加入的数据发生了 hash 冲突</p><p>JDK1.8</p><p>1、初始化哈希数组时会调用 resize 方法</p><p>2、put 时如果哈希数组的容量已超过阈值，则需要对哈希数组扩容</p><p>3、在树化前，会先检查哈希数组长度，如果哈希数组的长度小于64，则进行扩容，而不是进行树化</p></blockquote><h4 id="HashMap扩容优化"><a href="#HashMap扩容优化" class="headerlink" title="HashMap扩容优化"></a>HashMap扩容优化</h4><blockquote><p>在 JDK1.7 中，HashMap 整个扩容过程就是分别取出数组元素，一般该元素是最后一个放入链表中的元素，然后遍历以<strong>该元素为头</strong>（头插法）的单向链表元素，依据每个被遍历元素的 hash 值计算其在新数组中的下标，然后进行交换。这样的扩容方式会将<strong>原来哈希冲突的单向链表尾部变成扩容后单向链表的头部</strong>。</p><p>而在 JDK 1.8 中，HashMap 对扩容操作做了优化。由于扩容数组的长度是 2 倍关系，所以对于假设初始 tableSize = 4 要扩容到 8 来说就是 0100 到 1000 的变化（左移一位就是 2 倍），在扩容中只用判断原来的 hash 值和左移动的一位（newtable 的值）按位与操作是 0 或 1 就行，0 的话索引不变，1 的话索引变成原索引加上扩容前数组。</p><p>之所以能通过这种“与运算“来重新分配索引，是因为 hash 值本来就是随机的，而 hash 按位与上 newTable 得到的 0（扩容前的索引位置）和 1（扩容前索引位置加上扩容前数组长度的数值索引处）就是随机的，所以扩容的过程就能把之前哈希冲突的元素再随机分布到不同的索引中去。</p></blockquote><h4 id="一般使用什么作为HashMap的键？"><a href="#一般使用什么作为HashMap的键？" class="headerlink" title="一般使用什么作为HashMap的键？"></a>一般使用什么作为HashMap的键？</h4><blockquote><p>一般用 Integer、String 这种不可变类作为 HashMap 的 key。</p><p>String 最为常用，因为：</p><ul><li>因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。这就使得字符串很适合作为 Map 中的键，字符串的处理速度要快过其它的键对象。这就是 HashMap中 的键往往都使用字符串。</li><li>因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的，这些类已经很规范的覆写了 hashCode() 以及 equals() 方法。</li></ul></blockquote><h4 id="LoadFactor-负载因子的设计"><a href="#LoadFactor-负载因子的设计" class="headerlink" title="LoadFactor 负载因子的设计"></a>LoadFactor 负载因子的设计</h4><blockquote><p>默认 LoadFactor 值为 0.75。<strong>为什么是 0.75 这个值呢？</strong></p><p>这是因为对于使用链表法的哈希表来说，查找一个元素的平均时间是 O(n)，这里的 n 指的是遍历链表的长度，因此加载因子越大，对空间的利用就越充分，这就意味着链表的长度越长，查找效率也就越低。如果设置的加载因子太小，那么哈希表的数据将过于稀疏，对空间造成严重浪费。</p></blockquote><h4 id="HashMap与HashTable区别"><a href="#HashMap与HashTable区别" class="headerlink" title="HashMap与HashTable区别"></a>HashMap与HashTable区别</h4><blockquote><p>Hashtable可以看做是线程安全版的HashMap，两者几乎“等价”（当然还是有很多不同）。</p><p>Hashtable几乎在每个方法上都加上synchronized（同步锁），实现线程安全。</p><p>HashMap可以通过 Collections.synchronizeMap(hashMap) 进行同步。</p><p>区别：</p><ul><li>HashMap继承于AbstractMap，而Hashtable继承于Dictionary；</li><li>线程安全不同。Hashtable的几乎所有函数都是同步的，即它是线程安全的，支持多线程。而HashMap的函数则是非同步的，它不是线程安全的。若要在多线程中使用HashMap，需要我们额外的进行同步处理；</li><li>null值。HashMap的key、value都可以为null。Hashtable的key、value都不可以为null；</li><li>迭代器(Iterator)。HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException。</li><li>容量的初始值和增加方式都不一样：HashMap默认的容量大小是16；增加容量时，每次将容量变为“原始容量x2”。Hashtable默认的容量大小是11；增加容量时，每次将容量变为“原始容量x2 + 1”；</li><li>添加key-value时的hash值算法不同：HashMap添加元素时，是使用自定义的哈希算法。Hashtable没有自定义哈希算法，而直接采用的key的hashCode()。</li><li>速度。由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。</li></ul></blockquote><h4 id="红黑树中为什么新加入的节点总是红色的"><a href="#红黑树中为什么新加入的节点总是红色的" class="headerlink" title="红黑树中为什么新加入的节点总是红色的?"></a>红黑树中为什么新加入的节点总是红色的?</h4><blockquote><p>因为被插入前的树结构是构建好的，一旦我们进行添加黑色的节点，无论添加在哪里都会破坏原有路径上的黑色节点的数量平等关系，所以插入红色节点是正确的选择。</p></blockquote><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="解析XML文件的方式"><a href="#解析XML文件的方式" class="headerlink" title="解析XML文件的方式"></a>解析XML文件的方式</h3><blockquote><p><strong>DOM</strong>：先把XML文档读取到内存中，并整理出DOM树的形式再读取。用户可以边解析边修改，而且还能再次解析已经被解析过的内容。</p><p><strong>SAX</strong>：不同于DOM的文档驱动，它是事件驱动的，也就是说，是一种基于回调函数的解析方式。不需要把文档载入内存，因此可以节省内存。</p><p>如何选择：</p><ul><li>如果解析时还要更新XML中的数据，那么使用DOM方式。</li><li>如果解析文件过大，那么使用SAX方式。</li><li>如果对解析速度有要求，那么使用SAX方式，因为它比DOM方式快。</li></ul></blockquote><h3 id="flush方法和close方法的区别"><a href="#flush方法和close方法的区别" class="headerlink" title="flush方法和close方法的区别"></a>flush方法和close方法的区别</h3><blockquote><p>flush：刷新缓冲区，流对象可以继续使用</p><p>close：先刷新缓冲区，然后通知系统释放资源，流对象不可继续使用</p></blockquote><h2 id="SPI-机制"><a href="#SPI-机制" class="headerlink" title="SPI 机制"></a>SPI 机制</h2><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="Statement-与-PreparedStatement-比较"><a href="#Statement-与-PreparedStatement-比较" class="headerlink" title="Statement 与 PreparedStatement 比较"></a>Statement 与 PreparedStatement 比较</h2><blockquote><p>Statement 的弊端：</p><ul><li>存在拼串操作，繁琐</li><li>存在 SQL 注入问题</li></ul><p>PreparedStatement 的优势：</p><ul><li>防止 SQL 注入</li><li>对 SQL 进行预编译，对于批量处理可以大大提高效率</li><li>提高代码的可读性和可维护性</li></ul></blockquote><h2 id="count-和count-字段名-的比较"><a href="#count-和count-字段名-的比较" class="headerlink" title="count(*)和count(字段名)的比较"></a>count(*)和count(字段名)的比较</h2><blockquote><p>假设员工有100条数据，该表的主键是学好，其中有个可以为空的“爱好”字段，在这100条数据中，只有30个员工的“爱好”字段不为空。</p><p>case1：</p><p><code>select count(*) from 员工表</code></p><p>结果返回100没毛病。</p><p>case2：</p><p><code>select count(爱好) from 员工表</code></p><p>结果返回30，因为只有30个员工的“爱好”字段不为空。</p><p>case3：</p><p><code>select count(学号) from 员工表</code></p><p>结果返回100，因为学号是主键非空，并且由于主键有索引，因此性能比<code>count(*)</code>好。</p></blockquote><blockquote><p><strong>结论</strong>：</p><ol><li>如果在表中某字段名允许为空，那么通过 <code>count(字段名)</code> 形式得到的结果不是表中的总记录数，而是表中该字段不为空的记录数。</li><li>推荐使用 <code>count(主键)</code> 的方式来得到总记录数，这样性能会好些。</li><li>通常情况下，使用 <code>count(1)</code> 和使用 <code>count(主键)</code> 是一样的，因为默认取得就是第一个字段，我们通常第一个字段就是 id，但是有些情况如果不是 id，那么不要使用 <code>count(1)</code>。</li></ol></blockquote><h2 id="存储过程的优点和缺点"><a href="#存储过程的优点和缺点" class="headerlink" title="存储过程的优点和缺点"></a>存储过程的优点和缺点</h2><blockquote><p><strong>优点：</strong></p><ol><li>如果针对某个业务逻辑，要对多个表进行多次insert、delete、update、select操作，那么可以把这些操作汇集成一个存储过程。这样以后每次执行业务逻辑时，只需要调用存储过程即可，提高了代码的可重用性。</li><li>存储过程只在创建时编译，以后每次执行都不需要重新编译，提高数据库执行速度。</li></ol><p><strong>缺点：</strong></p><ol><li>移植性差，针对MySQL的存储过程无法在Oracle上执行。</li><li>难以调试，如果存储过程中某一条SQL语句出错，只会提示你这个存储过程出错，不会定位到具体哪条SQL出错了。</li><li>存储过程处理大批量数据没有批处理方式的性能好。</li></ol></blockquote><h1 id="Spring-技术栈"><a href="#Spring-技术栈" class="headerlink" title="Spring 技术栈"></a>Spring 技术栈</h1><h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><h3 id="循环引用（循环依赖）和循环调用的区别"><a href="#循环引用（循环依赖）和循环调用的区别" class="headerlink" title="循环引用（循环依赖）和循环调用的区别"></a>循环引用（循环依赖）和循环调用的区别</h3><blockquote><p>循环引用是两个或多个bean相互之间的持有对方，比如CircleA引用CircleB，CircleB引用CircleC，CircleC引用CircleA，则它们最终反映为一个环。</p><p>循环调用是方法之间的环调用。循环调用是无法解决的，除非有终结条件，否则就是死循环，最终导致内存溢出错误。</p></blockquote><h3 id="Spring-事务注解的实现原理"><a href="#Spring-事务注解的实现原理" class="headerlink" title="Spring 事务注解的实现原理"></a>Spring 事务注解的实现原理</h3><h3 id="Spring-bean-的生命周期"><a href="#Spring-bean-的生命周期" class="headerlink" title="Spring bean 的生命周期"></a>Spring bean 的生命周期</h3><h3 id="Spring-如何解决循环依赖（为什么用三级缓存？能否用二级缓存？）"><a href="#Spring-如何解决循环依赖（为什么用三级缓存？能否用二级缓存？）" class="headerlink" title="Spring 如何解决循环依赖（为什么用三级缓存？能否用二级缓存？）"></a>Spring 如何解决循环依赖（为什么用三级缓存？能否用二级缓存？）</h3><h3 id="Spring-AOP-切面是何时解析的"><a href="#Spring-AOP-切面是何时解析的" class="headerlink" title="Spring AOP 切面是何时解析的"></a>Spring AOP 切面是何时解析的</h3><h3 id="在解析切面的过程中，Spring-AOP-为什么加缓存"><a href="#在解析切面的过程中，Spring-AOP-为什么加缓存" class="headerlink" title="在解析切面的过程中，Spring AOP 为什么加缓存"></a>在解析切面的过程中，Spring AOP 为什么加缓存</h3><h3 id="AOP-中代理对象是何时产生的"><a href="#AOP-中代理对象是何时产生的" class="headerlink" title="AOP 中代理对象是何时产生的"></a>AOP 中代理对象是何时产生的</h3><h3 id="代理对象调用目标方法是如何织入调用的"><a href="#代理对象调用目标方法是如何织入调用的" class="headerlink" title="代理对象调用目标方法是如何织入调用的"></a>代理对象调用目标方法是如何织入调用的</h3><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="什么是Spring-MVC-？简单介绍下你对-Spring-MVC-的理解"><a href="#什么是Spring-MVC-？简单介绍下你对-Spring-MVC-的理解" class="headerlink" title="什么是Spring MVC ？简单介绍下你对 Spring MVC 的理解?"></a>什么是Spring MVC ？简单介绍下你对 Spring MVC 的理解?</h3><blockquote><p>Spring MVC 是一个基于 Java 的实现了 MVC 设计模式的请求驱动类型的轻量级 Web 框架，通过把 Model，View，Controller 分离，将 web 层进行职责解耦，把复杂的 web 应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。 </p></blockquote><h3 id="Spring-MVC-请求的整个流程"><a href="#Spring-MVC-请求的整个流程" class="headerlink" title="Spring MVC 请求的整个流程"></a>Spring MVC 请求的整个流程</h3><blockquote><ol><li>用户发送请求至前端控制器 DispatcherServlet；</li><li>DispatcherServlet 收到请求后，调用 HandlerMapping 处理器映射器，请求获取 Handler；</li><li>处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet；</li><li>DispatcherServlet 调用 HandlerAdapter 处理器适配器；</li><li>HandlerAdapter 经过适配调用具体处理器(Handler，也叫后端控制器)；</li><li>Handler 执行完成返回 ModelAndView；</li><li>HandlerAdapter 将 Handler 执行结果 ModelAndView 返回给 DispatcherServlet；</li><li>DispatcherServlet 将 ModelAndView 传给 ViewResolver 视图解析器进行解析；</li><li>ViewResolver 会根据用户传入的 ViewName 创建一个 View 对象；</li><li>DispatcherServlet 调用 View 对象的 render 方法渲染页面（即将模型数据填充至视图中）；</li><li>DispatcherServlet 响应用户。</li></ol></blockquote><p><img src="https://i.loli.net/2020/01/10/nusCOoWmykhfzxL.png" alt="image-20191102111431487.png"></p><p>下面这张图更为详细，包含拦截器和异常处理流程。</p><p><img src="https://i.loli.net/2020/01/10/CaIHmkujLXz7M8x.png" alt="image-20191103101835114.png"></p><h3 id="Spring-MVC-的主要组件和作用"><a href="#Spring-MVC-的主要组件和作用" class="headerlink" title="Spring MVC 的主要组件和作用"></a>Spring MVC 的主要组件和作用</h3><blockquote><ul><li><strong>前端控制器 DispatcherServlet</strong></li></ul><p>Spring MVC 在单一 Servlet 的基础上，对原先过于耦合的各种控制器逻辑进行逐步分离。由原来单一 Servlet 作为整个应用的 Front Controller，当它接收到具体的 Web 请求后，会转发给次级 Page Controller。</p><p>作用：接收请求、响应结果，相当于转发器，有了 DispatcherServlet 就减少了其它组件之间的耦合度。</p><ul><li><strong>处理器映射器 HandlerMapping</strong> </li></ul><p>作用：根据请求的 url 来查找 Handler。</p><ul><li><strong>处理器适配器 HandlerAdapter</strong> </li></ul><p>作用：按照特定规则（HandlerAdapter 要求的规则）去执行 Handler。调用具体的方法对用户发来的请求来进行处理。当 HandlerMapping 获取到执行请求的 controller 时，DispatcherServlet 会根据 controller 对应的类型来调用相应的 HandlerAdapter 来进行处理。通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。 </p><p>处理器适配器 HandlerAdapter 有四种默认实现类：</p><p>① <strong>HttpRequestHandlerAdapter</strong> ：适配静态资源处理器。</p><p>② <strong>SimpleControllerHandlerAdapter</strong> ：适配实现了 Controller 接口的处理器 。</p><p>③ *<em>SimpleServletHandlerAdapter *</em>：适配实现了 Servlet 接口的处理器。</p><p>④ <strong>RequestMappingHandlerAdapter</strong> ：适配注解类处理器。</p><ul><li><strong>处理器 Handler</strong></li></ul><p>作用： Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler对具体的用户请求进行处理。 </p><ul><li><strong>视图解析器 ViewResolver</strong> </li></ul><p>与 HandlerMapping 帮助 DispatcherServlet 查找具体的 Controller 一样，ViewResolver 会根据 ModelAndView 中的逻辑视图名查找相应的 View 实现类，然后将查找的结果返回给 DispatcherServlet。 </p><p>作用：进行视图的解析，根据视图逻辑名解析成真正的视图（View）。</p><ul><li><strong>视图 View</strong> </li></ul><p>作用：将模型填充到视图进行渲染。</p></blockquote><p>其中， <strong>处理器映射器</strong>、 <strong>处理器适配器</strong>、<strong>视图解析器</strong> 称为 Spring MVC 的三大组件。</p><h3 id="Spring-MVC-各个组件的初始化过程"><a href="#Spring-MVC-各个组件的初始化过程" class="headerlink" title="Spring MVC 各个组件的初始化过程"></a>Spring MVC 各个组件的初始化过程</h3><p><strong>HandlerMapping 的初始化</strong></p><blockquote><p>以 SimpleUrlHandlerMapping 类初始化时为例进行分析：</p><ol><li>调用 ApplicationObjectSupport 的 setApplicationContext 方法</li><li>调用 SimpleUrlHandlerMapping 的 initApplicationContext 方法</li><li>调用 SimpleUrlHandlerMapping 的父类 AbstractHandlerMapping 的 initInterceptors 方法，将SimpleUrlHandlerMapping 中定义的 interceptors 包装成 HandlerInterceptor 对象保存在 adaptedInterceptors 数组中</li><li>调用 SimpleUrlHandlerMapping 的 registerHandlers 方法</li><li>调用 AbstractUrlHandlerMapping 的 registerHandler 方法，将 SimpleUrlHandlerMapping 中定义的 mappings 注册到 handlerMap 集合中</li><li>调用 ApplicationContext 的 getBean 方法</li></ol></blockquote><p><strong>HandlerAdapter 的初始化</strong></p><blockquote><p>创建一个 HandlerAdapter 对象，将这个 HandlerAdapter 对象保存在 DispatcherServlet 的 handlerAdapters 集合中。</p><p>当 Spring MVC 将某个 URL 对应到某个 Handler 时，在 handlerAdapters 集合中查询哪个 handlerAdapter 对象支持这个 Handler，支持的 handlerAdapter 将会被返回，然后调用这个 handlerAdapter 接口对应的方法。</p><p>如果这个 handlerAdapter 对象是 SimpleControllerHandlerAdapter，将调用 Controller 接口的 handle 方法。</p></blockquote><p><strong>整个 Controller 的调用逻辑</strong></p><blockquote><p>整个 Spring MVC 的调用是从 DispatcherServlet 的 <strong>doService</strong> 方法开始的，在 doService 方法中会将 ApplicationContext、localeResolver、themeResolver 等对象添加到 request 中便于在后面使用。接着就是调用<strong>doDispatch</strong> 方法，这个方法是主要的处理用户请求的地方。</p><p>Controller 的处理逻辑关键就是在 DispatcherServlet 的 handlerMappings 集合中根据请求的 URL 匹配每个 HandlerMapping 对象中的某个 Handler，匹配成功后将会返回这个 Handler 的处理链 HandlerExecutionChain 对象，而这个 HandlerExecutionChain 对象中将会包含用户自定义的多个 HandlerInterceptor 对象。</p><p>HandlerInterceptor 接口中定义的三个方法中，preHandle 和 postHandle 分别在 Handler 的执行前和执行后执行，afterCompletion 在 View 渲染完成、在 DispatcherServlet 返回之前执行。这里需要注意的地方是，当 preHandle 返回 false 时，当前的请求将在执行完 afterCompletion 后直接返回，Handler 也将不再执行。</p><p>查看 HandlerExecutionChain 的 getHandler 方法你会发现返回的是 Object 对象，所以在这里 Handler 对象是没有类型的，<strong>Handler 的类型是由 HandlerAdapter 决定的</strong>。</p><p>DispatcherServlet 会根据 Handler 对象在其 handlerAdapters 集合中匹配哪个 HandlerAdapter 实例支持该Handler 对象。接下去执行 Handler 对象的相应方法了，如该 Handler 对象的相应方法返回一个 ModelAndView 对象接下是就去执行 View 渲染。</p></blockquote><p>下面是 Controller 的调用逻辑时序图：</p><p><img src="https://i.loli.net/2020/01/10/K1apMN2brtnSJoA.png" alt="image-20191104212329224.png"></p><p>下面是解析 View 的时序图：</p><p><img src="https://i.loli.net/2020/01/10/9YH5gNM1TWyItdZ.png" alt="image-20191104214225705.png"></p><h3 id="Spring-MVC-的异常处理流程"><a href="#Spring-MVC-的异常处理流程" class="headerlink" title="Spring MVC 的异常处理流程"></a>Spring MVC 的异常处理流程</h3><h3 id="如何把-ModelMap-里面的数据放入-Session-里面"><a href="#如何把-ModelMap-里面的数据放入-Session-里面" class="headerlink" title="如何把 ModelMap 里面的数据放入 Session 里面"></a>如何把 ModelMap 里面的数据放入 Session 里面</h3><blockquote><p>可以在类上面加上 <code>@SessionAttributes</code> 注解,里面包含的字符串就是要放入 session 里面的 key。 </p></blockquote><h3 id="Spring-MVC-如何使用拦截器"><a href="#Spring-MVC-如何使用拦截器" class="headerlink" title="Spring MVC 如何使用拦截器"></a>Spring MVC 如何使用拦截器</h3><blockquote><p>首先需要定义拦截器，这里提供两种方式：</p><p>① 实现 HandlerInterceptor 接口 </p><p>② 继承 HandlerInterceptorAdapter 类 </p><p>然后需要定义一个配置类，实现 WebMvcConfigurer 接口，重写  addInterceptors 方法注册拦截器。</p></blockquote><h3 id="Spring-MVC-启动流程"><a href="#Spring-MVC-启动流程" class="headerlink" title="Spring MVC 启动流程"></a>Spring MVC 启动流程</h3><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><h3 id="Spring-Boot-是如何自动装配的，怎么体现自动？装配的什么？"><a href="#Spring-Boot-是如何自动装配的，怎么体现自动？装配的什么？" class="headerlink" title="Spring Boot 是如何自动装配的，怎么体现自动？装配的什么？"></a>Spring Boot 是如何自动装配的，怎么体现自动？装配的什么？</h3><h3 id="Spring-Boot-是如何启动的（分-jar-包启动和-war-包启动）"><a href="#Spring-Boot-是如何启动的（分-jar-包启动和-war-包启动）" class="headerlink" title="Spring Boot 是如何启动的（分 jar 包启动和 war 包启动）"></a>Spring Boot 是如何启动的（分 jar 包启动和 war 包启动）</h3><h3 id="Spring-Boot-中如何使用-SPI-机制进行配置的（参考-SpringServletContainerInitializer）"><a href="#Spring-Boot-中如何使用-SPI-机制进行配置的（参考-SpringServletContainerInitializer）" class="headerlink" title="Spring Boot 中如何使用 SPI 机制进行配置的（参考 SpringServletContainerInitializer）"></a>Spring Boot 中如何使用 SPI 机制进行配置的（参考 SpringServletContainerInitializer）</h3><h3 id="Spring-Boot-内嵌-Tomcat-的原理"><a href="#Spring-Boot-内嵌-Tomcat-的原理" class="headerlink" title="Spring Boot 内嵌 Tomcat 的原理"></a>Spring Boot 内嵌 Tomcat 的原理</h3><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="JSP-和-Servlet-的区别"><a href="#JSP-和-Servlet-的区别" class="headerlink" title="JSP 和 Servlet 的区别"></a>JSP 和 Servlet 的区别</h2><blockquote><p>JSP 侧重于视图，Servlet 用于控制逻辑。</p></blockquote><h2 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h2><blockquote><p>由于 Servlet 运行在容器中，没有 main 方法，因此，整个生命周期都是由容器来管理的。</p><p>Servlet 的生命周期可以分为<strong>五个阶段</strong>：</p><blockquote><p>当 Servlet 容器启动或客户端发送一个请求时，Servlet 容器会查找内存中是否存在该 Servlet 实例，若存在，则直接读取该实例响应请求；如果不存在，再去加载创建初始化 Servlet 实例。</p></blockquote><ul><li><strong>加载</strong> </li></ul><p>Servlet 容器通过类加载器使用 Servlet 的 class 文件来加载 Servlet。</p><ul><li><strong>创建</strong></li></ul><p>Servlet 容器通过调用 Servlet 的构造函数来创建一个 Servlet 实例。</p><ul><li><strong>初始化</strong> </li></ul><p>Servlet 容器将调用 Servlet 的 init() 方法进行初始化。这个方法在 Servlet 已被创建但向客户端提供服务之前调用，并且只会被调用一次。</p><ul><li><strong>服务（处理请求）</strong> </li></ul><p>初始化后，Servlet 处于能响应请求的就绪状态。当接收到客户端请求时，Servlet 容器会创建一个新的线程来处理该请求，接着调用 service() 方法完成客户端请求，HttpServlet 的 service() 方法会根据不同的请求转调不同的 doXxx() 方法。 </p><ul><li><strong>卸载（销毁）</strong> </li></ul><p>Servlet 容器在卸载 Servlet 之前需要调用 destory() 方法，让 Servlet 自己释放其占用的系统资源，一旦调用 destory() 方法，容器就不会向这个 Servlet 发送任何请求消息了。如果容器需要这个 Servlet，那么就必须重新创建并初始化一个实例。注意到 destory() 方法也只会被调用一次。</p></blockquote><h2 id="Servlet-与-CGI-的区别"><a href="#Servlet-与-CGI-的区别" class="headerlink" title="Servlet 与 CGI 的区别"></a>Servlet 与 CGI 的区别</h2><blockquote><p>Servlet 处于服务器进程中，通过多线程的方式运行，每个请求都创建一个<strong>线程</strong>来执行，一个实例可以服务于多个请求，并且其实例一般不会销毁。</p><p>CGI 对每个请求都产生新的<strong>进程</strong>，服务完成后就销毁，因此效率低于 Servlet。</p></blockquote><h2 id="filter-的作用"><a href="#filter-的作用" class="headerlink" title="filter 的作用"></a>filter 的作用</h2><blockquote><p>filter 使用户可以改变一个 request 并且修改一个 response。</p><p>filter 不是一个 Servlet，它不能产生一个 response，但它能在一个 request 到达 Servlet 之前预处理 request，也可以在离开 Servlet 时处理 response。</p><p>filter其实是一个 Servlet 链。</p><p>一个 filter 的作用包括以下几个方面：</p><ul><li>在 Servlet 被调用之前截获</li><li>在 Servlet 被调用之前检查 ServletRequest</li><li>根据需要修改 Request 头和 Request 数据</li><li>根据需要修改 Response头和 Response 数据</li><li>在 Servlet 被调用之后截获</li></ul></blockquote><h2 id="Cookie-和-Session-的特点"><a href="#Cookie-和-Session-的特点" class="headerlink" title="Cookie 和 Session 的特点"></a>Cookie 和 Session 的特点</h2><blockquote><p>Cookie 的特点：</p><ul><li>存储的数据在客户端</li><li>单个 cookie 的大小有限制</li><li>同一个域名下的 cookie 数量有限制</li></ul><p>Session 的特点：</p><ul><li>session 用于存储一次会话的多次请求的数据，存在服务端</li><li>session 可以存储任意类型，任意大小的数据</li><li>session 没有数据大小限制</li></ul></blockquote><h2 id="客户端不关闭，服务端重启后，两次获取的-Session-是否是同一个？"><a href="#客户端不关闭，服务端重启后，两次获取的-Session-是否是同一个？" class="headerlink" title="客户端不关闭，服务端重启后，两次获取的 Session 是否是同一个？"></a>客户端不关闭，服务端重启后，两次获取的 Session 是否是同一个？</h2><blockquote><p>不是同一个，重启后由于 Session 不同，数据会丢失，因此需要确保数据不丢失，Tomcat 帮我们完成了这个工作。</p><p><strong>Session 钝化</strong>：服务器正常关闭之前，将 Session 对象序列化到硬盘上。</p><p><strong>Session 活化</strong>：服务器启动后，将磁盘上的 Session 文件反序列化到 Session 对象。</p></blockquote><h2 id="会话跟踪方式"><a href="#会话跟踪方式" class="headerlink" title="会话跟踪方式"></a>会话跟踪方式</h2><blockquote><ul><li><strong>Cookie</strong></li></ul><p>客户端第一次请求服务端时，服务端会生成一个 cookie，然后使用 Set-Cookie 头将它作为 HTTP 响应的一部分传送到客户端，客户端一旦收到 Set-Cookie 头，那么就会把 Set-Cookie 头中的数据保存下来。</p><p>客户端第二次请求服务端时，会把之前保存的数据放入请求头 cookie 中，服务端获取到 cookie 后，知道了客户端已经操作过，那么直接返回信息。</p><ul><li><strong>Session</strong> </li></ul><p>由于每次客户端的访问都必须回传 cookie，如果 cookie 很多，则无形增加了客户端与服务端的数据传输量，而 session 的出现正是为了解决这个问题。</p><p>客户端第一次请求时，服务端会在内存中创建一个新的 session 对象，并且这个 session 对象有一个唯一的 id 称为 JSESSIONID。当服务端响应客户端时，服务端会使用 Set-Cookie 头将 JSESSIONID 作为 HTTP 响应的一部分传送到客户端，客户端一旦收到 Set-Cookie 头，那么就会把 Set-Cookie 头中的数据保存下来。 </p><p>客户端下一次访问时，会把 JSESSIONID 发送到服务端，服务端获取到 cookie 信息后，会查找内存中是否有这个 session 对象，找到了就返回这个 session 对象。因此<strong>服务端的一次会话范围内，多次获取的 session 对象是同一个。</strong></p><p><strong>Session 是依赖 Cookie 的，如果 Cookie 被禁用，那么 Session 也将失效。</strong></p><ul><li><strong>URL 重写</strong> </li></ul><p>在 URL 结尾添加会话 ID（通常是 JESSIONID），通过 URL 的信息传递到服务端，当 cookie 禁用时可以采用此种方式。</p><ul><li><strong>隐藏表单域</strong></li></ul><p>将会话 ID（通常是 JESSIONID）添加到 HTML 表单元素中提交到服务端，此表单在页面上隐藏。</p></blockquote><h2 id="设计一个测试，验证Nginx有10万以上的并发"><a href="#设计一个测试，验证Nginx有10万以上的并发" class="headerlink" title="设计一个测试，验证Nginx有10万以上的并发"></a>设计一个测试，验证Nginx有10万以上的并发</h2><blockquote><p>回答1：</p><p>写一个Java单元测试类，启动10万个线程，同时访问Nginx提供的服务，看看它的处理情况。</p></blockquote><blockquote><p>回答2：</p><ol><li>部署Nginx服务到一台服务器上</li><li>在多台虚拟机上部署Jmeter程序，使用分布式测试，每台进行一部分请求</li><li>配置好meter的访问Http的URL和采样器</li><li>进行并发测试，并统计相关结果</li></ol></blockquote><blockquote><p>回答3：</p><ol><li>不同配置的服务处理能力不一样，准备不同配置的服务器，部署Nginx服务到这些服务器上，比如1核2G、2核2G、4核2G三种配置的服务器</li><li>10万并发单台机器难以模拟，使用Jmeter分布式测试，多台机器一起并发请求，机器数量满足10万并发为止</li><li>配置meter不同的测试用例和采样器，比如不同的用户数、请求数、接口参数</li><li>对读场景接口进行并发测试</li><li>对写场景接口进行并发测试</li><li>统计对比读、写相关场景结果</li><li>统计的结果和官方结果进行一个对比，不同场景对Nginx调优后再测一次</li><li>同时对Tomcat也进行同样的部署和压测</li><li>同样的配置和并发下，对比Nginx和Tomcat两个服务的统计数据</li></ol></blockquote><h2 id="解释负载均衡是什么"><a href="#解释负载均衡是什么" class="headerlink" title="解释负载均衡是什么"></a>解释负载均衡是什么</h2><blockquote><p>回答1：</p><p>就是弄多台服务器分担处理业务</p></blockquote><blockquote><p>回答2：</p><p>负载均衡，英文名称为Load Balance，指由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助。通过某种负载分担技术，将外部发送来的请求均匀分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。负载均衡能够平均分配客户请求到服务器阵列，借此提供快速获取重要数据，解决大量并发访问服务问题，这种集群技术可以用最少的投资获得接近于大型主机的性能。</p></blockquote><blockquote><p>回答3：</p><p>在互联网环境下，用户请求量越来越大，大型服务器硬件设备非常昂贵，单台服务器的处理能力总是有限的。我们可以使用多台服务器联合组成一组服务来替代单台服务器，解决单台处理不过来的问题，而且单台还存在单点故障。利用服务组一起来分担处理这些请求，如何均匀的分担这些请求给服务组提高可用性，涉及的技术就是负载均衡。</p><p>负载均衡分为硬件负载均衡和软件负载均衡，硬件均衡服务器比如F5、Array，软件负载均衡有LVS、Nginx、HAproxy。</p></blockquote><h2 id="负载均衡有哪些手段"><a href="#负载均衡有哪些手段" class="headerlink" title="负载均衡有哪些手段"></a>负载均衡有哪些手段</h2><p>软件负载均衡的手段有：DNS负载均衡、数据链路层负载均衡、IP负载均衡、反向代理负载均衡</p><p>。。。。</p><h3 id="怎样保证Nginx可用性"><a href="#怎样保证Nginx可用性" class="headerlink" title="怎样保证Nginx可用性"></a>怎样保证Nginx可用性</h3><blockquote><p>回答1：</p><p>通过LVS+Keepalived进行主备切换</p></blockquote><blockquote><p>回答2：</p><p>Keepalived+nginx实现nginx的高可用。通过keepalived来实现同一个虚拟lP映射到两台Nginx代理服务器，如果主服务器挂掉或者主服务器的keepalived挂掉又或者主服务器的Nginx挂掉（Nginx挂掉后会杀死keepalived的进程，在脚本中有控制）那从服务器的keepalived会检测到并会接管原先MASTER的网络功能，这种方式来实现Nginx的高可用性。</p></blockquote><blockquote><p>回答3：</p><p>通过keepalived来实现同一个虚拟IP映射到两台Nginx代理服务器，操作步骤如下：</p><ol><li>需要两台的主机</li><li>在这两台主机上分别安装Nginx和Keepalived</li><li>Keepalived配置好VIP，其中一台为主，另一台为备</li><li>修改Nginx配置，修改Keepalived配置，重启</li><li>通过VIP进行访问测试</li></ol></blockquote><h2 id="Nginx-的进程模型"><a href="#Nginx-的进程模型" class="headerlink" title="Nginx 的进程模型"></a>Nginx 的进程模型</h2><blockquote><p>Nginx 默认采用多进程工作方式，Nginx 启动后，会运行一个 master 进程和多个 worker 进程。其中 master 充当整个进程组与用户的交互接口，同时对进程进行监护，管理 worker 进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。worker 用来处理基本的网络事件，worker 之间是平等的，它们共同竞争来处理来自客户端的请求。</p></blockquote><p><strong>master-worker 机制</strong></p><p><img src="https://i.loli.net/2020/01/10/sMUdOk6vTm5BaoN.png" alt="1570784420521.png"></p><p><img src="https://i.loli.net/2020/01/10/X8eDY2psyGAnxN7.png" alt="1570784779883.png"></p><p><strong>master-worker 机制的好处</strong></p><blockquote><p>首先，对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程继续争抢工作，服务不会中断，master 进程则很快启动新的 worker 进程。当然，worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p></blockquote><p><strong>需要设置多少个 worker</strong></p><blockquote><p>Nginx 同 Redis 类似都采用了 <strong>IO 多路复用机制</strong>，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，即使是千上万个请求也不在话下。每个 worker 的线程可以把一个cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu 数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p></blockquote><p><strong>Nginx 有一个master，有四个 worker，每个 worker 支持的最大连接数为 1024，请问支持的最大并发数是多少？</strong></p><blockquote><p>普通的静态访问最大并发数是：<code>worker_connections * worker_processes/2</code>，在这里也就是 1024 * 4 / 2 = 2048</p><p>作为反向代理来说，最大并发数量应该是 <code>worker_connections * worker_processes/4</code>，在这里也就是 1024 * 4 / 4 = 1024</p></blockquote><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="RPC和RMI的理解和区别"><a href="#RPC和RMI的理解和区别" class="headerlink" title="RPC和RMI的理解和区别"></a>RPC和RMI的理解和区别</h2><blockquote><p><strong>RPC远程过程调用：</strong></p><p>RPC(Remote Procedure Call Protocol)远程过程调用协议，通过网络从远程计算机上请求调用某种服务。</p><p>一次RPC调用的过程大概有10步：</p><ol><li>执行客户端调用语句，传送参数</li><li>调用本地系统发送网络消息</li><li>消息传送到远程主机</li><li>服务器得到消息并取得参数 </li><li>根据调用请求以及参数执行远程过程（服务）</li><li>执行过程完毕，将结果返回服务器句柄</li><li>服务器句柄返回结果，调用远程主机的系统网络服务发送结果</li><li>消息传回本地主机 </li><li>客户端句柄由本地主机的网络服务接收消息</li><li>客户端接收到调用语句返回的结果数据</li></ol></blockquote><blockquote><p><strong>RMI远程方法调用：</strong></p><p>RMI(Remote Method Invocation)远程方法调用，能够让在客户端<strong>Java</strong>虚拟机上的对象像调用本地对象一样调用服务端java 虚拟机中的对象上的方法。</p><p>一次RMI远程调用步骤：</p><ol><li>客户调用客户端辅助对象stub上的方法</li><li>客户端辅助对象stub打包调用信息（变量，方法名），通过网络发送给服务端辅助对象skeleton</li><li>服务端辅助对象skeleton将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li><li>调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象skeleton</li><li>服务端辅助对象将结果打包，发送给客户端辅助对象stub</li><li>客户端辅助对象将返回值解包，返回给调用者</li><li>客户获得返回值</li></ol></blockquote><blockquote><p><strong>RPC与RMI的区别</strong>：</p><ol><li>方法调用方式不同</li></ol><p>RMI中是通过在客户端的Stub对象作为远程接口进行远程方法的调用<strong>。</strong>每个远程方法都具有方法签名。如果一个方法在服务器上执行，但是没有相匹配的签名被添加到这个远程接口(stub)上，那么这个新方法就不能被RMI客户方所调用。</p><p>RPC中是通过网络服务协议向远程主机发送请求，请求包含了一个参数集和一个文本值，通常形成“classname.methodname(参数集)”的形式。RPC远程主机就去搜索与之相匹配的类和方法，找到后就执行方法并把结果编码，通过网络协议发回。</p><ol start="2"><li>适用语言范围不同</li></ol><p>RMI只用于Java；</p><p>RPC是网络服务协议，与操作系统和语言无关。</p><ol start="3"><li>调用结果的返回形式不同</li></ol><p>Java是面向对象的，所以RMI的调用结果可以是对象类型或者基本数据类型；</p><p>RMI的结果统一由外部数据表示 (External Data Representation, XDR)语言表示，这种语言抽象了字节序类和数据类型结构之间的差异。</p></blockquote><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><blockquote><p>在ISO7498-2标准中，数字签名的定义如下：“附加在数据单元上的一些数据，或者对数据单元所做的密码变换，这种数据和变换允许数据单元的接收者用以确认数据单元来源和数据单元的完整性，并保护数据，防止被人（例如接收者）进行伪造”。它是不对称加密算法的典型应用，依靠公钥加密技术来实现在公钥加密技术里，每一个使用者都有一对密钥：一把公钥和一把私钥，公钥可以自由发布，但私钥则秘密保存。</p><p>具体而言，数字签名的应用过程如下：数据源发送方<strong>使用自己的私钥</strong>对数据校验和或其他与数据内容有关的变量进行加密处理，完成对数据的合法“签名”，数据接收方则利用对方的公钥来解读收到的“数字签名”，并将解读结果用于对数据完整性的检验，以确认签名的合法性。数字签名技术是在网络系统虚拟环境中确认身份的重要技术，完全可以代替现实过程中的“亲笔签字”，在技术和法律上有保证。</p><p>在公钥与私钥管理方面，数字签名应用与加密邮件PGP（Pretty Good Privacy）技术正好相反。在数字签名应用中，发送者的公钥可以很方便地得到，但他/她的私钥则需要严格保密。</p><p><strong>公钥加密私钥解密用于发送私有消息。</strong></p><p><strong>私钥加密公钥解密用于数字签名。</strong></p><p>为了更好地说明数字签名，引用一个较为通俗易懂的方法。</p><p>1）A有两把钥匙，一把是公钥，另一把是私钥。</p><p>2）A把公钥送给B、C、D，每人一把。</p><p>3）D要给A写一封保密的信。他写完后用A的公钥加密，就可以达到保密的效果。</p><p>4）A收到信后，用自己的私钥解密，就看到了信件内容。注意，只要私钥不泄露，这封信就是安全的，即使落在别人手里，它也是无法被解密的。</p><p>5）A给D回信，决定采用“数字签名”。他写完后先用Hash函数，生成信件的摘要（Digest）。</p><p>6）然后，A使用自己的私钥，对这个摘要加密，生成“数字签名”（Signature）。</p><p>7）A将这个签名和自己需要发送的消息利用D的公钥进行加密，然后发送给D。</p><p>8）D收到信后，先用自己的私钥解密得到明文消息和数字签名，然后取下数字签名，用A的公钥解密，得到信件的摘要。由此证明，这封信确实是A发出的。</p><p>9）D再对信件本身使用Hash函数，将得到的结果与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p><p>10）复杂的情况出现了。C想欺骗D，他偷偷使用了D的电脑，用自己的公钥换走了A的公钥。此时，D实际拥有的是C的公钥，但是还以为这是A的公钥。因此，C就可以冒充A，用自己的私钥做“数字签名”，写信给D，让D用假的公钥进行解密。</p><p>11）后来，D感觉不对劲，发现自己无法确定公钥是否真的属于A。她想到了一个办法，要求去找“证书中心”（Certificate Authority，CA）为公钥做认证。证书中心用自己的私钥，对A的公钥和一些相关信息一起加密，生成“数字证书”（Digital Certificate）。</p><p>12）A拿到数字证书以后，就可以放心了。以后再给D写信，只要在签名的同时，再附上数字证书就行了。</p><p>13）D收信后，用CA的公钥解开数字证书，就可以拿到真实的公钥了，然后就能证明“数字签名”是否真的是A签的。</p></blockquote><p>对加密/解密和签名/验签完整过程详细理解：</p><blockquote><p>A-&gt;B:</p><ol><li>A提取消息m的消息摘要h(m),并使用自己的私钥对摘要h(m)进行加密,生成签名s</li><li>A将签名s和消息m一起,使用B的公钥进行加密,生成密文c,发送给B</li></ol><p>B:</p><ol><li>B接收到密文c,使用自己的私钥解密c得到明文m和数字签名s</li><li>B使用A的公钥解密数字签名s解密得到H(m)</li><li>B使用相同的方法提取消息m的消息摘要h(m)</li><li>B比较两个消息摘要。相同则验证成功;不同则验证失败</li></ol></blockquote><h2 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h2><blockquote><p>至于为什么是三次握手，不是两次或者四次的原因很简单：一句话，三次刚好是两个闭环，发送方一个闭环，接收方一个闭环，每个闭环保证双方可以正常通信。</p></blockquote><p>TCP三次握手过程：</p><p><img src="https://i.loli.net/2020/01/10/DfhW1ZxsN2LCpIi.png" alt="Snipaste_2019-09-03_09-43-24.png"></p><p>最初两端的TCP进程都处于CLOSED关闭状态，A主动打开连接，而B被动打开连接。（<strong>A、B关闭状态CLOSED</strong>——<strong>B收听状态LISTEN——A同步已发送状态SYN-SENT——B同步收到状态SYN-RCVD——A、B连接已建立状态ESTABLISHED</strong>）</p><p><strong>第一次握手</strong>：起初两端都处于CLOSED关闭状态，Client将标志位SYN置为1，随机产生一个值seq=x，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认；</p><p><strong>第二次握手</strong>：Server收到数据包后由标志位SYN=1得知Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=x+1，随机产生一个值seq=y，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态，此时操作系统为该TCP连接分配TCP缓存和变量；</p><p><strong>第三次握手</strong>：Client收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并且此时操作系统为该TCP连接分配TCP缓存和变量，并将该数据包发送给Server，Server检查ack是否为y+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。</p><blockquote><p><strong>为什么不是二次握手？</strong></p><p>主要为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。如A发出连接请求，但因连接请求报文丢失而未收到确认，于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，A工发出了两个连接请求报文段，其中第一个丢失，第二个到达了B，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达B，此时B误认为A又发出一次新的连接请求，于是就向A发出确认报文段，同意建立连接，不采用三次握手，只要B发出确认，就建立新的连接了，此时A不理睬B的确认且不发送数据，则B一致等待A发送数据，浪费资源。</p></blockquote><blockquote><p><strong>Server端易受到SYN攻击？</strong></p><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击，SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。</p><p>防范SYN攻击措施：降低主机的等待时间使主机尽快的释放半连接的占用，短时间受到某IP的重复SYN则丢弃后续请求。</p></blockquote><p>TCP四次挥手过程：</p><p><img src="https://i.loli.net/2020/01/10/YR16GQlPCVah2In.png" alt="Snipaste_2019-09-03_10-10-53.png"></p><p>起初A和B处于<strong>ESTABLISHED状态</strong></p><p><strong>第一次挥手</strong>：A发出连接释放报文段并处于<strong>FIN-WAIT-1状态</strong>。</p><p><strong>第二次挥手</strong>：B发出确认报文段且进入<strong>CLOSE-WAIT状态</strong>。A收到确认后，进入<strong>FIN-WAIT-2状态</strong>，等待B的连接释放报文段。</p><p><strong>第三次挥手</strong>：B没有要向A发出的数据，B发出连接释放报文段且进入<strong>LAST-ACK状态</strong>。</p><p><strong>第四次挥手</strong>：A发出确认报文段且进入<strong>TIME-WAIT状态</strong>。B收到确认报文段后进入<strong>CLOSED状态</strong>。A经过等待计时器时间2MSL后，进入<strong>CLOSED状态</strong>。</p><p>大白话描述：</p><p>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p><blockquote><p><strong>为什么A在TIME-WAIT状态必须等待2MSL的时间？（MSL最长报文段寿命Maximum Segment Lifetime，MSL=2）</strong></p><ol><li>保证A发送的最后一个ACK报文段能够到达B</li><li>防止已失效的连接请求报文段出现在本连接中</li></ol></blockquote><blockquote><p><strong>为什么连接的时候是三步握手，关闭的时候却是四步“握手”？</strong></p><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p></blockquote><h1 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h1><h2 id="如何合理选择排序算法？"><a href="#如何合理选择排序算法？" class="headerlink" title="如何合理选择排序算法？"></a>如何合理选择排序算法？</h2><blockquote><ol><li><p>这组数据有什么样的特征？</p><p>① 有没有可能包含有大量重复的元素？如果有这种可能的话，三路快排是更好地选择。</p><p>② 是否大部分数据距离它正确的位置很近？是否近乎有序？如果是这样的话，插入排序是更好地选择。</p><p>③ 是否数据的取值范围非常有限？比如对学生成绩排序。如果是这样的话，计数排序是更好地选择。</p></li><li><p>对排序有什么额外的要求？</p><p>是否需要稳定排序？如果是的话，归并排序是更好地选择。</p></li><li><p>数据的存储状况是怎样的？</p><p>是否是使用链表存储的？如果是的话，归并排序是更好地选择。</p></li><li><p>数据的存储状况是怎样的？</p><p>数据的大小是否可以装载在内存里？数据量很大，或者内存很小，不足以装载在内存里，需要使用外排序算法。</p></li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解读HashMap-对比JDK7和JDK8</title>
      <link href="/posts/4293.html"/>
      <url>/posts/4293.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HashMap 算是我们日常学习工作中遇到的比较多的一个类，它用于存储 Key-Value 键值对。HashMap <strong>允许使用 null 键和 null 值</strong>，在计算 hash 值时，null 键的 hash 值就是 0，HashMap 并不保证在执行某些操作后键值对的顺序和原来相同，在多线程的环境下，使用 HashMap 需要注意线程安全问题。</p><p>在 JDK1.8 之前，<strong>HashMap 底层采用数组+链表</strong>实现，即用链表处理冲突，同一 hash 值的元素都存储在一个链表里。但是当位于一个桶中的元素较多，即 hash 值相等的元素较多时，通过 key 值依次查找的效率较低。在 JDK1.8 中，<strong>HashMap 存储采用数组+链表+红黑树</strong>实现，当链表长度超过阈值 8 且数组长度超过 64 时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>在本文中，我会通过对 JDK1.7 和 JDk1.8 的比较，为你介绍如下内容：</p><ul><li><p>增删改查方法分析</p></li><li><p>resize 方法分析</p></li><li><p>树的实现（后续有时间再写，主要是图需要画更多）</p></li><li><p>问答题（必看）</p></li></ul><blockquote><p>一些没有提到的细节，我会在最后以问答题的方式呈现。</p></blockquote><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>在 JDK1.7 中的构造方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参构造方法</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为容量大小</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为容量大小 + 负载因子</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (*)</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 忽略这个</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为一个Map的子类</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                  DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putAllForCreate</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JDK1.8 中的构造方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参构造方法</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为容量大小</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为容量大小 + 负载因子</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (*)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数为一个Map的子类</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><ol><li><p>无参构造方法的虽然写法不同，但是实际效果是一样的，这个很容易看出来。</p></li><li><p>注意到我上面注释<code>(*)</code>的地方</p><pre class="line-numbers language-java"><code class="language-java">threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两行代码都是把初始容量赋值给了<code>threshold</code>变量。我们知道，<code>threshold</code>指的是 HashMap 存储元素的阈值，超过了这个阈值就会对其进行扩容操作。难道这里和我们想的还不一样？是的，这里的<code>threshlod</code>只是用于暂存 HashMap 的容量，因为在 HashMap 中并不存在 <code>capacity</code> 这个成员变量。</p><p>所不同的是，在 JDK1.7 中，<code>threshold</code>是传入的初始容量，而在 JDK1.8 中，<code>threshold</code>是传入的初始容量经过<code>tableSizeFor</code>方法进行向上取最近的 2 的次幂之后的容量值。举个例子，如果传入的容量是 12，那么在 JDK1.7 中，在构造方法调用后，<code>threshold</code>值为 12，在 JDK1.8 中，<code>threshold</code>值为 16。</p><p><code>tableSizeFor</code>方法的源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过这一系列的位运算，如果输入值是 2 的冪，则原样返回，如果不是 2 的冪，则向上取就近的冪。至于为什么可以自己列举下，这里我们只需要知道这个方法的作用就够了。</p><p>现在我有一个问题，为什么在 JDK1.7 里<code>threshold</code>就不需要向上取 2 的次幂呢？答案是需要的，不过它不是在构造方法中完成的，而是在<code>inflateTable</code>方法中进行了 HashMap 的<strong>初始化</strong>。</p><p><code>inflateTable</code>方法的源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Find a power of 2 >= toSize</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// threshold 真正的值</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到上面的<code>roundUpToPowerOf2</code>方法了吗？作用其实和<code>tableSizeFor</code>方法是一样的，就是让容量向上取最近的 2 的次幂。</p><p>在这个方法中<code>threshold</code>才是真正的进行初始化了，<code>threshold = capacity * loadFactor</code>。</p><p>同时也把<code>table</code>进行了初始化，我这里特别提到<strong>初始化</strong>这三个字，上面一处我也特地加粗了。我强调的原因是在 JDK1.8 中，初始化并没有类似<code>inflateTable</code>这样单独的方法，而是在<code>resize</code>方法中完成的，也就是说，<strong>在 JDK1.8 中，<code>resize</code>等价于 JDK1.7 中的<code>inflateTable + resize</code>。</strong></p></li><li><p>我们看传入参数为 Map 子类的构造方法。</p><p>在JDk1.7中，初始化完<code>loadFactor</code>后，就直接调用<code>inflateTable(threshold)</code>方法初始化 HashMap 了。最后把调用<code>putAllForCreate</code>方法把所有 KV 装入新的 HashMap 中，这个方法还是比较简单的。</p><p><code>putAllForCreate</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">putAllForCreate</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> e <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 点进去</span>        <span class="token function">putForCreate</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>putForCreate</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">putForCreate</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前key的hash值</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> null <span class="token operator">==</span> key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到hash值对应的bucket（哈希数组的位置）</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前bucket已经有元素占据，则继续向后找，如果找到有key相同的元素，那么覆盖原来的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前bucket首元素没有被占据，或者当前bucket中没有相同元素，那么就在桶的第一个位置添加该元素</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createEntry</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到这一行<code>table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</code>说明是把新的节点放入到数组中，也就是链表的头部，<strong>JDK1.7 插入元素时头插法</strong>。</p></li></ol><h2 id="HashMap-中的变量"><a href="#HashMap-中的变量" class="headerlink" title="HashMap 中的变量"></a>HashMap 中的变量</h2><p>JDK1.7中的变量：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认Entry数组的初始化容量，为16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Entry数组的最大容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认加载因子</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化的Entry空数组</span><span class="token keyword">static</span> <span class="token keyword">final</span> Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_TABLE <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 哈希数组</span><span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认的阈值，当一个键值对的键是String类型时，且map的容量达到了这个阈值，就启用备用哈希（alternative hashing）。备用哈希可以减少String类型的key计算哈希码（更容易）发生哈希碰撞的发生率。该值可以通过定义系统属性jdk.map.althashing.threshold来指定。如果该值是1，表示强制总是使用备用哈希；如果是-1则表示禁用</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HashMap的键值对数量</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结构性变化计数器</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 哈希种子值，默认为0</span><span class="token keyword">transient</span> <span class="token keyword">int</span> hashSeed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JDK1.8 中的变量：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 哈希桶上的元素数量增加到此值后，将链表转换为红黑树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 哈希桶上的红黑树上的元素数量减少到此值时，将红黑树转换为链表</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 哈希数组的容量至少增加到此值，且满足TREEIFY_THRESHOLD的要求时，将链表转换为红黑树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="put-方法分析"><a href="#put-方法分析" class="headerlink" title="put 方法分析"></a>put 方法分析</h2><h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><code>put</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>putVal</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向当前哈希数组</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向待插入元素应当插入的位置</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果哈希数组还未初始化，或者容量无效，则需要初始化一个哈希数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化哈希数组，后面会将resize方法</span>        tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// p指向hash所在的哈希槽上的首个元素。 (length - 1) &amp; hash 返回的是元素存放的索引</span>    <span class="token comment" spellcheck="true">// 如果哈希槽为空，则在该槽上放置首个元素（普通Node）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果哈希槽不为空，则需要在哈希槽后面链接更多的元素</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 对哈希槽中的首个元素进行判断         *         * 只有哈希值一致（还说明不了key是否一致），且key也相同（必要时需要用到equals()方法）时，         * 这里才认定是存在同位元素（在HashMap中占据相同位置的元素）         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果该哈希槽上链接的是红黑树节点，则需要调用红黑树的插入方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上面两种情况都是针对首个元素的判断，下面就是其他元素的判断</span>        <span class="token comment" spellcheck="true">// 遍历哈希槽后面元素（binCount统计的是插入新元素之前遍历过的元素数量）</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果没有找到同位元素，则需要插入新元素</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 插入一个普通结点</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 哈希槽上的元素数量增加到TREEIFY_THRESHOLD后，将从链表转换为红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到相同元素，直接退出</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 走到这里就说明，存在相同元素，那么问题就是是否需要覆盖原来的元素？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果onlyIfAbsent为false，或者原来的值为null，那么就覆盖</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 更新旧值</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 回调接口，不用管</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// HashMap的更改次数加一，只有新增和删除才会更新，修改是不会的</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果哈希数组的容量已超过阈值，则需要对哈希数组扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 后面讲</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 回调接口，不用管</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果插入的是全新的元素，在这里返回null</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><code>put</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果哈希数组还未初始化，则调用inflateTable初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是key是null，那么单独调用putForNullKey添加</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取桶的位置</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前桶已经有元素占据，则继续向后找，如果找到有key相同的元素，那么覆盖原来的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 标记添加操作，结构性变化</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前桶首元素没有被占据，或者当前桶中没有相同元素，那么就在桶的第一个位置添加该元素</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>addEntry</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果HashMap的大小超过阈值，并且当前桶不为空，那么进行扩容操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 扩容到原来的两倍</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不为null进行hash</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取桶的位置</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 头插法创建新的节点</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="resize-方法分析"><a href="#resize-方法分析" class="headerlink" title="resize 方法分析"></a>resize 方法分析</h2><h3 id="JDK1-7-1"><a href="#JDK1-7-1" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><code>resize</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 原来大小已经达到最大值，就不扩容了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 扩容后新的Entry数组</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将原来的元素转移到新的Entry数组，initHashSeedAsNeeded方法决定是否重新计算String类型的hash值</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新table</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新threshold</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>transfer</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取新的桶位置</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果i位置原来没有值，则直接插入；有值，采用头插法</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>initHashSeedAsNeeded</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果hashSeed != 0，表示当前正在使用备用哈希</span>    <span class="token keyword">boolean</span> currentAltHashing <span class="token operator">=</span> hashSeed <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果vm启动了且map的容量大于阈值，使用备用哈希</span>    <span class="token keyword">boolean</span> useAltHashing <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">isBooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>capacity <span class="token operator">>=</span> Holder<span class="token punctuation">.</span>ALTERNATIVE_HASHING_THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异或操作，如果两值同时为false，或同时为true，都算是false</span>    <span class="token keyword">boolean</span> switching <span class="token operator">=</span> currentAltHashing <span class="token operator">^</span> useAltHashing<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>switching<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 改变hashSeed的值，使hashSeed!=0，rehash时String类型会使用新hash算法</span>        hashSeed <span class="token operator">=</span> useAltHashing            <span class="token operator">?</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Hashing<span class="token punctuation">.</span><span class="token function">randomHashSeed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> switching<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Holder</code>中维护的<code>ALTERNATIVE_HASHING_THRESHOLD</code>是触发启用备用哈希的阈值，该值表示，如果 HashMap 的容量（Entry 数组大小）达到了该值，启用备用哈希。</p><p><code>Holder</code>会尝试读取 JVM 启动时传入的参数<code>-Djdk.map.althashing.threshold</code>并赋值给<code>ALTERNATIVE_HASHING_THRESHOLD</code>。它的值有如下含义：</p><ul><li>ALTERNATIVE_HASHING_THRESHOLD = 1，总是使用备用哈希</li><li>ALTERNATIVE_HASHING_THRESHOLD = -1，禁用备用哈希</li></ul><p>在<code>initHashSeedAsNeeded(int capacity)</code>方法中，会判断如果 HashMap 的容量（Entry 数组大小）是否大于等于<code>ALTERNATIVE_HASHING_THRESHOLD</code>，是的话就会生成一个随机的哈希种子<code>hashSeed</code>，该种子会在<code>hash</code>方法中使用到。</p><p>上述操作实际上就是为了防止哈希碰撞攻击，只对 String 有效，因为 String 的<code>hashcode</code>方法是公开的。我们自己定义的类的<code>hashcode</code>方法就不需要这种操作了。</p><blockquote><p>在JDK1.7里，经过 <code>resize</code> 后的链表元素会倒置。</p></blockquote><h3 id="JDK1-8-1"><a href="#JDK1-8-1" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><code>resize</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 旧容量</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 旧阈值</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新容量，新阈值</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果哈希数组已经初始化（非首次进来）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果哈希表数组容量已经超过最大容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将HashMap的阈值更新为允许的最大值</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不需要更改哈希数组（容量未发生变化），直接返回</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// newCap = oldCap &lt;&lt; 1 尝试将哈希表数组容量加倍，如果容量成功加倍（没有达到上限），则将阈值也加倍</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果哈希数组还未初始化（首次进来）</span>    <span class="token comment" spellcheck="true">// 如果实例化HashMap时已经指定了初始容量，则将哈希数组当前容量初始化为与旧阈值一样大 this.threshold = tableSizeFor(initialCapacity);</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        <span class="token comment" spellcheck="true">// oldThr在这里实际上就是原始capacity，因为capacity暂存在threshold里</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果实例化HashMap时没有指定初始容量，则使用默认的容量与阈值</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 至此，如果newThr==0，则可能有以下两种情形：     * 1.哈希数组已经初始化，且哈希数组的容量还未超出最大容量，     *   但是，在执行了加倍操作后，哈希数组的容量达到了上限     * 2.哈希数组还未初始化，但在实例化HashMap时指定了初始容量     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft              <span class="token comment" spellcheck="true">// 针对第二种情况，将阈值更新为初始容量*装载因子</span>                <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 针对第一种情况，将阈值更新为最大值</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新阈值</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 至此，说明哈希数组需要初始化，或者需要扩容，即创建新的哈希数组</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化数组，不需要扩容的话直接返回</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是扩容，则需要将旧元素复制到新容器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前哈希槽上存在元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 置空该哈希槽</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果该哈希槽上只有一个元素</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 由于总容量变了，所以需要重新哈希</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果该哈希槽上链接了不止一个元素，且该元素是TreeNode类型</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 拆分红黑树以适应新的容量要求</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果该哈希槽上链接了不止一个元素，且该元素是普通Node类型</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    <span class="token comment" spellcheck="true">// 低位链表：存放扩容之后数组下标 = 当前数组下标</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 高位链表：存放扩容之后数组下标 = 当前数组下标 + 扩容前数组大小</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 扩容前16，扩容后32，比如在最后一个哈希桶索引为15的元素进行如下操作：</span>                        <span class="token comment" spellcheck="true">// hash             =    0 1111</span>                        <span class="token comment" spellcheck="true">// oldCap           =    1 0000</span>                        <span class="token comment" spellcheck="true">// e.hash &amp; oldCap  =    0 0000</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果没有尾，说明链表为空</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 链表为空时，头节点指向该元素</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                <span class="token comment" spellcheck="true">// 如果有尾，那么链表不为空，把该元素挂到链表的最后</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 把尾节点设置为当前元素</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// hash             =    1 1111</span>                        <span class="token comment" spellcheck="true">// oldCap           =    1 0000</span>                        <span class="token comment" spellcheck="true">// e.hash &amp; oldCap  =    1 0000</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 低位的元素组成的链表还是放置在原来的位置</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 高位的元素组成的链表放置的位置只是在原有位置上偏移了老数组的长度个位置</span>                    <span class="token comment" spellcheck="true">// 例：hash为17在老数组放置在0下标，在新数组放置在16下标</span>                    <span class="token comment" spellcheck="true">//    hash为18在老数组放置在1下标，在新数组放置在17下标</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><ol><li><p><code>threshold = newThr;</code>看到了吗？<code>threshold</code>在这里才更新为真正的阈值，之前都是暂存容量的。</p></li><li><p>对于链表结构节点的重新分配，不同于 JDK1.7 中需要重新进行 index 的计算，在 JDK1.8 中，是通过分组的方式存储在低位和高位链表中。</p><blockquote><p>举个例子：</p><p>有一个哈希表的容量为16，其中一个元素的 hash 值为：1001 1111，那么经过计算，最后这个元素在哈希表中的位置是 15</p><p>​                                 n - 1： 0000 1111</p><p>​                                         hash：1001 1111</p><p>​                                        index：0000 1111   = 15</p><p>另有一个元素的 hash 值为：1000 1111，那么经过计算，最后这个元素在哈希表中的位置也是 15</p><p>​                                        n - 1： 0000 1111</p><p>​                                        hash：1000 1111</p><p>​                                      index：0000 1111   = 15</p><hr><p>可以发现，在扩容前这两个元素都是存放在了索引为 15 的哈希桶中。但是扩容后就不一样了，由于容量变成了原来的两倍 32，那么哈希表的索引也就会发生改变</p><p>​                                        n - 1： 0001 1111</p><p>​                                        hash：100<strong>1</strong> 1111</p><p>​                                      index：0001 1111   = 31 = 15 + 16</p><p>​                                     n - 1： 0001 1111</p><p>​                                     hash：100<strong>0</strong> 1111</p><p>​                                    index：0000 1111   = 15</p><p>注意到我加粗的数字，扩容后的索引位置貌似和 hash 值的第 5 位有关，也就是说，我们只需要考虑第 5 位是 0 还是 1，如果是 1 就放在高位，如果是 0 就放在低位，没错，事实就是如此，那该如何判断呢？我们发现，哈希表原来的容量是16，转换成二进制刚好是 0001 0000，这样不就可以通过让元素的 hash 值和原来的数组容量进行 &amp; 运算来判断第 5 位了。如果第 5 位是 1，说明存放在高位，数组索引为<strong>原位置+原数组大小</strong>，否则是 0，说明存在在低位，也就是<strong>原位置</strong>。</p></blockquote><p>在 JDK1.8 中确实就是这么做的，见如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 让元素的哈希值与扩容前的数组大小进行&amp;运算，为0存放在低位链表loHead loTail</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果没有尾，说明链表为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 链表为空时，头节点指向该元素</span>        loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 如果有尾，那么链表不为空，把该元素挂到链表的最后</span>        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把尾节点设置为当前元素</span>    loTail <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为1存放在高位链表hiHead hiTail</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>        hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>    hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 低位的元素组成的链表还是放置在 原来的位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 高位的元素组成的链表放置的位置是在 原有位置上偏移了原来数组的长度个位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>实际效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/Snipaste_2020-01-22_14-43-16.png" alt="JDK1.8扩容重新分配"></p><h2 id="remove-方法分析"><a href="#remove-方法分析" class="headerlink" title="remove 方法分析"></a>remove 方法分析</h2><h3 id="JDK1-7-2"><a href="#JDK1-7-2" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><code>remove</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token function">removeEntryForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>removeEntryForKey</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">removeEntryForKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到可以删除的元素，删除需要标志结构性变化</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要删除的元素刚好是桶中第一个元素，那么让table[i]指向后一个元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> e<span class="token punctuation">)</span>                table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordRemoval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        prev <span class="token operator">=</span> e<span class="token punctuation">;</span>        e <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK1-8-2"><a href="#JDK1-8-2" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><code>remove</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>removeNode</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span>                           <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> null<span class="token punctuation">,</span> e<span class="token punctuation">;</span>        K k<span class="token punctuation">;</span>        V v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                         <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// p指向的是node的前一个节点</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 从HashMap中移除匹配的元素         * 可能只需要匹配hash和key就行，也可能还要匹配value，这取决于matchValue参数         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>                             <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 删除的是第一个节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 删除中间的节点，node表示待删元素，即让node的前一个节点p的下一个节点指向node的下一个节点</span>            <span class="token keyword">else</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 回调接口</span>            <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>removeNode</code>方法参数说明：</p><ul><li><code>matchValue</code>：移除元素时是否需要考虑 value 的匹配问题</li><li><code>movable</code>：移除元素后如果红黑树根结点发生了变化，那么是否需要改变结点在链表上的顺序</li></ul><h2 id="get-方法分析"><a href="#get-方法分析" class="headerlink" title="get 方法分析"></a>get 方法分析</h2><h3 id="JDK1-7-3"><a href="#JDK1-7-3" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><code>get</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null <span class="token operator">==</span> entry <span class="token operator">?</span> null <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getEntry</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据给定的 <code>key</code> 和 <code>hash</code>查找对应的（同位）元素，如果找不到，则返回 <code>null</code>。</p><h3 id="JDK1-8-3"><a href="#JDK1-8-3" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><code>get</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>getNode</code>方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    K k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// always check first node</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据给定的 <code>key</code> 和 <code>hash</code>查找对应的（同位）元素，如果找不到，则返回 <code>null</code>。</p><p>删除和获取我都不在详细分析了，基本和添加差不多。</p><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="为什么使用数组-链表或红黑树？"><a href="#为什么使用数组-链表或红黑树？" class="headerlink" title="为什么使用数组+链表或红黑树？"></a>为什么使用数组+链表或红黑树？</h3><blockquote><p>数组是用来确定哈希桶的位置，利用元素的 key 的 hash 值对数组长度取模得到。链表或红黑树是用来解决 hash 冲突问题，当出现 hash 值一样的情形，就在数组上的对应位置形成一条链表或一棵树。</p><p><strong>PS：</strong>这里的 hash 值并不是指 hashcode，而是将 hashcode 高低十六位异或过的（JDK1.8）。</p></blockquote><h3 id="HashMap-的-get-过程（JDK1-8）"><a href="#HashMap-的-get-过程（JDK1-8）" class="headerlink" title="HashMap 的 get 过程（JDK1.8）"></a>HashMap 的 get 过程（JDK1.8）</h3><blockquote><p>对 key 的 hashCode 进行 hash 运算，计算在哈希数组中的下标获取 bucket 位置，如果在桶的首位上就可以找到就直接返回，否则在树中找或者链表中遍历寻找。</p></blockquote><h3 id="HashMap-的-put-过程（JDK1-8）"><a href="#HashMap-的-put-过程（JDK1-8）" class="headerlink" title="HashMap 的 put 过程（JDK1.8）"></a>HashMap 的 put 过程（JDK1.8）</h3><blockquote><p><strong>putVal添加元素的过程：</strong></p><ol><li>如果哈希数组没有初始化，那么调用resize方法初始化哈希数组</li><li>获取添加元素在哈希数组中的索引，判断该位置是否有元素，如果没有，那么直接添加即可</li><li>如果已经有元素占用，那么判断该位置存放的是链表还是红黑树。如果是链表，判断当前位置的第一个元素的 hashcode 和 key 是否和自己的相同，相同则由 onlyIfAbsent 确定是否需要覆盖（或者本身是null直接覆盖）；如果是红黑树，则直接调用 putTreeVal 方法存放。</li><li>首元素判断完后，如果不满足条件，那么开始遍历后面的节点，如果到了链表末尾还是没有找到相同的元素，那么直接在尾部添加当前元素。如果在这期间遍历的元素数量达到树化的条件，那么需要将原来的链表转换为红黑树。</li><li>如果遍历期间找到和自己 hashcode 和 key 相同的元素，那么由 onlyIfAbsent 确定是否需要覆盖（或者本身是null直接覆盖）</li><li>如果添加了新元素而不是覆盖原有值，需要 modCount 加1，表示发生了一次结构性变化。如果 size大于 threshold，则需要扩容resize</li></ol></blockquote><h3 id="为什么用-n-1-amp-hash-而不是-hash-n"><a href="#为什么用-n-1-amp-hash-而不是-hash-n" class="headerlink" title="为什么用 (n-1)&amp;hash 而不是 hash%n"></a>为什么用 (n-1)&amp;hash 而不是 hash%n</h3><blockquote><p>这个问题也就是<strong>为什么 HashMap 扩容需要是2的次幂</strong>。</p><p>这里的 n 代表哈希表的长度，哈希表习惯将长度设置为 2 的 n 次方，这样恰好可以保证 (n - 1) &amp; hash 的计算得到的索引值总是位于 table 数组的索引之内。例如：hash=15，n=16 时，结果为 15；hash=17，n=16 时，结果为 1。</p><p>但如果用 hash%n，那么如果 hash 是负数就会出现结果也是负数，并且%运算的效率低。</p></blockquote><h3 id="为什么-JDK1-8-不直接使用红黑树，而是保留了链表？"><a href="#为什么-JDK1-8-不直接使用红黑树，而是保留了链表？" class="headerlink" title="为什么 JDK1.8 不直接使用红黑树，而是保留了链表？"></a>为什么 JDK1.8 不直接使用红黑树，而是保留了链表？</h3><blockquote><p>HashMap 在 JDK1.8 及以后的版本中引入了红黑树结构，若桶中链表元素个数大于等于 <strong>8</strong> 时，<strong>链表转换成树结构</strong>；若桶中链表元素个数小于等于 <strong>6</strong> 时，<strong>树结构还原成链表</strong>。因为红黑树的平均查找长度是 <strong>log(n)</strong>，长度为 8 的时候，平均查找长度为 3，如果继续使用链表，平均查找长度为 8/2=4，这才有转换为树的必要。链表长度如果是小于等于 6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</p><p>选择 6 和 8，中间有个差值 7 可以有效防止链表和树频繁转换（类似于复杂度震荡）。假设一下，如果设计成链表个数超过 8 则链表转换成树结构，链表个数小于 8 则树结构转换成链表，如果一个 HashMap 不停的插入、删除元素，链表个数在 8 左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。</p><p>第二种回答：</p><p>因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡，而单链表不需要。 当元素小于8个的时候，此时做查询操作，链表结构已经能保证查询性能。当元素大于8个的时候，此时需要红黑树来加快查询速度，但是新增节点的效率变慢了。所有才选取 8 这个数字作为链表转为红黑树的阈值，因为发生哈希冲突的概率满足泊松分布，当发生8次哈希碰撞的概率几乎为千万分之六，即以后很少会有元素再次添加到这个桶中，这样即使红黑树的新增元素效率低，也不会有多大影响了，因为几乎没有哈希桶中元素会超过8个。</p><p>当然这都得益于哈希函数设计的好，如果自己设计的哈希函数分布不均匀，比如我们把对象的hashcode都统一返回一个常量，最终的结果就是 HashMap 会退化为一个链表，get 方法的性能降为 O(n)，使用红黑树可以将性能提升到 O(log(n))，所以应该避免这种情况的发生。</p></blockquote><h3 id="谈一下-HashMap-中-hash-函数是怎么实现的"><a href="#谈一下-HashMap-中-hash-函数是怎么实现的" class="headerlink" title="谈一下 HashMap 中 hash 函数是怎么实现的"></a>谈一下 HashMap 中 hash 函数是怎么实现的</h3><blockquote><p><strong>用高16位与低16位进行异或</strong></p><p>1、至于为什么要这样呢？</p><p>hashcode是一个32位的值，用高16位与低16位进行异或，原因在于求index是是用 （n-1） &amp; hash ，如果hashmap的capcity很小的话，那么对于两个高位不同，低位相同的hashcode，可能最终会装入同一个桶中。那么会造成hash冲突，好的散列函数，应该尽量在计算hash时，把所有的位的信息都用上，这样才能尽可能避免冲突。</p><p>2、为什么使用异或运算？</p><p>通过写出真值表可以看出：异或运算为 50％的0和 50％的1，因此对于合并均匀的概率分布非常有用。</p><p>a | b | a AND b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  0</p><p>1 | 0 |  0</p><p>1 | 1 |  1</p><p>a | b | a OR b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  1</p><p>1 | 0 |  1</p><p>1 | 1 |  1</p><p>a | b | a XOR b</p><p>—+—+——–</p><p>0 | 0 |  0</p><p>0 | 1 |  1</p><p>1 | 0 |  1</p><p>1 | 1 |  0</p></blockquote><h3 id="hash-冲突有哪些解决办法？"><a href="#hash-冲突有哪些解决办法？" class="headerlink" title="hash 冲突有哪些解决办法？"></a>hash 冲突有哪些解决办法？</h3><blockquote><p><strong>链地址法</strong></p><p><strong>开放地址法</strong></p><ul><li>线性探测。遇到哈希冲突 +1 到下一个判断</li><li>平方探测。遇到哈希冲突 +1 +4 +9 +16</li><li>二次哈希。遇到哈希冲突 + hash2(key)</li></ul><p><strong>再哈希法</strong></p><p><strong>公共溢出区域法</strong></p></blockquote><h3 id="HashMap-在什么条件下扩容"><a href="#HashMap-在什么条件下扩容" class="headerlink" title="HashMap 在什么条件下扩容?"></a>HashMap 在什么条件下扩容?</h3><blockquote><p>JDK1.7</p><p>存放新值的时候当前已有元素的个数必须大于等于阈值，且当前加入的数据发生了 hash 冲突</p><p>JDK1.8</p><p>1、初始化哈希数组时会调用 resize 方法</p><p>2、put 时如果哈希数组的容量已超过阈值，则需要对哈希数组扩容</p><p>3、在树化前，会先检查哈希数组长度，如果哈希数组的长度小于64，则进行扩容，而不是进行树化</p></blockquote><h3 id="HashMap-扩容优化"><a href="#HashMap-扩容优化" class="headerlink" title="HashMap 扩容优化"></a>HashMap 扩容优化</h3><blockquote><p>在 JDK1.7 中，HashMap 整个扩容过程就是分别取出数组元素，一般该元素是最后一个放入链表中的元素，然后遍历以<strong>该元素为头</strong>（头插法）的单向链表元素，依据每个被遍历元素的 hash 值计算其在新数组中的下标，然后进行交换。这样的扩容方式会将<strong>原来哈希冲突的单向链表尾部变成扩容后单向链表的头部</strong>。</p><p>而在 JDK 1.8 中，HashMap 对扩容操作做了优化。由于扩容数组的长度是 2 倍关系，所以对于假设初始 tableSize = 4 要扩容到 8 来说就是 0100 到 1000 的变化（左移一位就是 2 倍），在扩容中只用判断原来的 hash 值和左移动的一位（newtable 的值）按位与操作是 0 或 1 就行，0 的话索引不变，1 的话索引变成原索引加上扩容前数组。</p><p>之所以能通过这种“与运算“来重新分配索引，是因为 hash 值本来就是随机的，而 hash 按位与上 newTable 得到的 0（扩容前的索引位置）和 1（扩容前索引位置加上扩容前数组长度的数值索引处）就是随机的，所以扩容的过程就能把之前哈希冲突的元素再随机分布到不同的索引中去。</p></blockquote><h3 id="一般使用什么作为-HashMap-的键？"><a href="#一般使用什么作为-HashMap-的键？" class="headerlink" title="一般使用什么作为 HashMap 的键？"></a>一般使用什么作为 HashMap 的键？</h3><blockquote><p>一般用 Integer、String 这种不可变类作为 HashMap 的 key。</p><p>String 最为常用，因为：</p><ul><li>因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。这就使得字符串很适合作为 Map 中的键，字符串的处理速度要快过其它的键对象。这就是 HashMap中 的键往往都使用字符串。</li><li>因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的，这些类已经很规范的覆写了 hashCode() 以及 equals() 方法。</li></ul></blockquote><h3 id="LoadFactor-负载因子的设计"><a href="#LoadFactor-负载因子的设计" class="headerlink" title="LoadFactor 负载因子的设计"></a>LoadFactor 负载因子的设计</h3><blockquote><p>默认 LoadFactor 值为 0.75。<strong>为什么是 0.75 这个值呢？</strong></p><p>这是因为对于使用链表法的哈希表来说，查找一个元素的平均时间是 O(n)，这里的 n 指的是遍历链表的长度，因此加载因子越大，对空间的利用就越充分，这就意味着链表的长度越长，查找效率也就越低。如果设置的加载因子太小，那么哈希表的数据将过于稀疏，对空间造成严重浪费。</p></blockquote><h3 id="HashMap-与-HashTable-区别"><a href="#HashMap-与-HashTable-区别" class="headerlink" title="HashMap 与 HashTable 区别"></a>HashMap 与 HashTable 区别</h3><blockquote><p>Hashtable 可以看做是线程安全版的 HashMap，两者几乎“等价”（当然还是有很多不同）。</p><p>Hashtable 几乎在每个方法上都加上 synchronized（同步锁），实现线程安全。</p><p>HashMap 可以通过 Collections.synchronizeMap(hashMap) 进行同步。</p><p>区别：</p><ul><li>HashMap 继承于 AbstractMap，而 Hashtable 继承于 Dictionary；</li><li>线程安全不同。Hashtable 的几乎所有函数都是同步的，即它是线程安全的，支持多线程。而HashMap 的函数则是非同步的，它不是线程安全的。若要在多线程中使用 HashMap，需要我们额外的进行同步处理；</li><li>null 值。HashMap 的 key、value 都可以为 null。Hashtable 的 key、value 都不可以为 null；</li><li>迭代器 (Iterator)。HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器，而 Hashtable 的 enumerator 迭代器不是 fail-fast 的。所以当有其它线程改变了 HashMap 的结构（增加或者移除元素），将会抛出ConcurrentModificationException。</li><li>容量的初始值和增加方式都不一样：HashMap 默认的容量大小是 16；增加容量时，每次将容量变为“原始容量x2”。Hashtable 默认的容量大小是 11；增加容量时，每次将容量变为“原始容量x2 + 1”；</li><li>添加 key-value 时的 hash 值算法不同：HashMap 添加元素时，是使用自定义的哈希算法。Hashtable 没有自定义哈希算法，而直接采用的 key 的 hashCode()。</li><li>速度。由于 Hashtable 是线程安全的也是 synchronized，所以在单线程环境下它比 HashMap 要慢。如果你不需要同步，只需要单一线程，那么使用 HashMap 性能要好过 Hashtable。</li></ul></blockquote><h3 id="红黑树中为什么新加入的节点总是红色的"><a href="#红黑树中为什么新加入的节点总是红色的" class="headerlink" title="红黑树中为什么新加入的节点总是红色的?"></a>红黑树中为什么新加入的节点总是红色的?</h3><blockquote><p>因为被插入前的树结构是构建好的，一旦我们进行添加黑色的节点，无论添加在哪里都会破坏原有路径上的黑色节点的数量平等关系，所以插入红色节点是正确的选择。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FeiChaoyu/cdn/img/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap源码 </tag>
            
            <tag> 集合映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《原则》感悟</title>
      <link href="/posts/43779.html"/>
      <url>/posts/43779.html</url>
      
        <content type="html"><![CDATA[<p><strong>你要自己去思考现实是什么</strong></p><p><strong>拥抱现实，处理现实</strong></p><p><strong>事实是产生好结果的必要部分</strong></p><p><strong>dream + reality + determination = a successful life</strong></p><p><strong>pain + reflection = progress</strong></p><p><strong>拥抱现实，并与之打交道，我得到了回报和快乐，痛苦也消失了。反思自己身边的环境，反思自己的个人进步</strong></p><p><strong>成功的五个步骤：</strong></p><ol><li>了解你的目标，然后朝其努力</li><li>找到那些阻碍实现目标的问题</li><li>识别出这些问题的根本原因，不要太快提出解决方案，要退一步思考，以区分出病状和病因</li><li>设计一个解决问题的方案</li><li>执行这些方案，向自己的目标前进</li></ol><p><strong>每个人都会面临的两大障碍：</strong></p><ul><li>自我障碍：阻止你客观承认弱点的那部分大脑</li><li>盲点障碍：人们无法欣赏他们看不到的东西</li></ul><p>用<strong>学习什么是事实</strong>取代<strong>证明自己是对的</strong>。因此需要找到那些<strong>善于思考</strong>，而又<strong>不同意自己观点</strong>的人。我们<strong>不关心他们的结论</strong>，我们只是想<strong>通过他们的眼睛看事物</strong>，并让他们<strong>透过我们的眼睛看事物</strong>，这样我们就可以把事情搞清楚，来确定什么是真相。换句话说，我们更想从他们那里得到的是<strong>深思熟虑后的反对意见</strong>。不仅是用自己的角度看事情，还通过这些<strong>有思想的人看事物</strong>。就像看事物的正反面，从而看到<strong>事物的全貌</strong>。</p><p><strong>与有洞察力、但看待事物角度不同的人一同前行</strong></p><p><strong>成功不是要实现目标，而是达到更高的成功层次</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
